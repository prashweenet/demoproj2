-----------------------------------------------------------------------------
--
--  Logical unit: TaxBookStructureHandling
--  Component:    ACCRUL
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
-----------------------------------------------------------------------------

layer Core;

@Override
PROCEDURE CRUD_Create___ (
   etag_   IN OUT VARCHAR2,
   key_    IN OUT Tax_Book_Structure_Level_Key,
   attr_   IN OUT VARCHAR2,
   info_   OUT VARCHAR2,
   action_ IN  VARCHAR2 )
IS
BEGIN
   IF (Tax_Book_Structure_Level_API.Is_Level_Above_Exist( Client_SYS.Get_Item_Value('COMPANY', attr_), Client_SYS.Get_Item_Value('STRUCTURE_ID', attr_), Client_SYS.Get_Item_Value('LEVEL_ABOVE', attr_)) = 'TRUE') THEN
      Client_SYS.Add_Warning(lu_name_,' DUPLEVELABOVE: The Level :P1 is used more than once as Level Above.', Client_SYS.Get_Item_Value('LEVEL_ABOVE', attr_));
   END IF;
   super(etag_, key_, attr_, info_, action_);
END CRUD_Create___;

PROCEDURE Create_New_Structure___ (
   company_      IN VARCHAR2,
   structure_id_ IN VARCHAR2,
   description_  IN VARCHAR2 ) 
IS
BEGIN
   Tax_Book_Structure_API.Create_New_Structure(company_ , structure_id_, description_);
END Create_New_Structure___;


PROCEDURE Connect_Disconnect_Values___ (
   company_             IN VARCHAR2,
   structure_id_        IN VARCHAR2,
   item_above_          IN VARCHAR2,
   selection_           IN VARCHAR2,
   action_              IN VARCHAR2,
   structure_item_type_ IN VARCHAR2) 
IS
   struct_id_              VARCHAR2(20);
   tax_book_values_list_   Utility_SYS.STRING_TABLE;
   index_                  NUMBER := 0;
   count_                  NUMBER := 0;
   del_item_               VARCHAR2(20);
   from_index_             NUMBER;
   to_index_               NUMBER;
   temp_from_index_        NUMBER;
   temp_to_index_          NUMBER;   
BEGIN
   IF (structure_item_type_ = 'NODE') THEN
      IF (action_ = 'DISCONNECT') THEN
         temp_from_index_  := INSTR(selection_, '^STRUCTURE_ID=',-1) + 14 ;
         temp_to_index_    := INSTR(selection_, '^', -1) -1;
         struct_id_        := substr(selection_, temp_from_index_, (temp_to_index_ - (temp_from_index_ - 1)));
         Utility_SYS.Tokenize(selection_, ';', tax_book_values_list_, count_);
         WHILE(index_ < count_)LOOP
            index_ := index_+ 1;
            from_index_ := 0;
            to_index_   := 0;            
            from_index_ := INSTR(tax_book_values_list_(index_), '^NAME_VALUE=', 1, 1) + 12;
            to_index_   := INSTR(tax_book_values_list_(index_), '^STRUCTURE_ID', 1, 1) - 1;
            del_item_   := substr(tax_book_values_list_(index_), from_index_, (to_index_ - (from_index_ -1)));
            Tax_Book_Structure_Item_API.Del_Branch(company_, struct_id_, del_item_);
         END LOOP;
      ELSE
         Tax_Book_Structure_Item_API.Add_Branch(company_, structure_id_, item_above_, selection_);
      END IF;
   ELSE
      Error_SYS.Record_General(lu_name_, 'ERRORINCONDISCON: Cannot connect a Code part Value to another code part value');
   END IF;
END Connect_Disconnect_Values___;

PROCEDURE Move_Items___ (
   company_             IN VARCHAR2,
   structure_id_        IN VARCHAR2,
   current_item_        IN VARCHAR2,
   item_above_          IN VARCHAR2,
   destination_node_id_ IN VARCHAR2 ) 
IS
BEGIN
   IF (item_above_ IS NOT NULL) THEN
      Tax_Book_Structure_Item_API.Move_Branch(company_, structure_id_, current_item_, destination_node_id_);
   ELSE
      Error_SYS.Record_General(lu_name_, 'CANTMOVEITEM: Cannot move or copy to a subitem of the source item.'); 
   END IF;
END Move_Items___;

FUNCTION Fetch_Page_Search_Context_Defaults___(
   structure_item_type_          IN VARCHAR2)  RETURN Page_Search_Context_Structure_Rec
IS
   page_search_context_struct_ Page_Search_Context_Structure_Rec;
BEGIN
   page_search_context_struct_.structure_item_type :=  structure_item_type_;
   RETURN page_search_context_struct_;
END Fetch_Page_Search_Context_Defaults___;