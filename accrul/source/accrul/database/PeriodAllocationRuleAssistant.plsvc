-----------------------------------------------------------------------------
--
--  Fragment:     PeriodAllocationRuleAssistant
--  Component:    ACCRUL
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
-----------------------------------------------------------------------------

layer Core;

FUNCTION Fetch_Default_Info___(
   company_         IN VARCHAR2,
   voucher_type_    IN VARCHAR2,
   accounting_year_ IN NUMBER,
   voucher_no_      IN NUMBER,
   row_no_          IN NUMBER,
   creator_         IN VARCHAR2,
   alloc_id_        IN NUMBER) RETURN Period_Alloc_Rule_Structure_Rec
IS
   rule_rec_        Period_Alloc_Rule_Structure_Rec;
   
   CURSOR get_alloc_info IS
      SELECT from_date,
             until_date,
             distr_type,
             creator
      FROM   period_allocation_rule_tab
      WHERE  allocation_id = alloc_id_;
BEGIN
   IF (alloc_id_ IS NULL) THEN
      rule_rec_.allocation_method  := NVL(Period_Allocation_API.Get_Alloc_Distr_Type_Db(company_,voucher_type_,voucher_no_,row_no_,accounting_year_),'E');   
      rule_rec_.allocation_source  := Period_Allocation_Rule_API.Get_Creator_Desc(creator_);  
   ELSE
      FOR rec_ IN get_alloc_info LOOP
         rule_rec_.from_date  := rec_.from_date;
         rule_rec_.until_date := rec_.until_date;
         rule_rec_.allocation_source  := Period_Allocation_Rule_API.Get_Creator_Desc(rec_.creator);  
         IF (rec_.distr_type = 'E') THEN
            rule_rec_.allocation_method  := NVL(Period_Allocation_API.Get_Alloc_Distr_Type_Db(company_,voucher_type_,voucher_no_,row_no_,accounting_year_),'E');     
         ELSIF (rec_.distr_type = 'P') THEN
            rule_rec_.allocation_method  := NVL(Period_Allocation_API.Get_Alloc_Distr_Type_Db(company_,voucher_type_,voucher_no_,row_no_,accounting_year_),'P');   
         ELSIF (rec_.distr_type = 'M') THEN
            rule_rec_.allocation_method  := NVL(Period_Allocation_API.Get_Alloc_Distr_Type_Db(company_,voucher_type_,voucher_no_,row_no_,accounting_year_),'M');   
         END IF;
      END LOOP;
   END IF;
   RETURN rule_rec_;
END Fetch_Default_Info___;


FUNCTION Create_New_Allocation___ (
   allocation_id_     IN NUMBER,
   company_           IN VARCHAR2,
   site_              IN VARCHAR2,
   creator_           IN VARCHAR2,
   from_date_         IN DATE,
   until_date_        IN DATE,
   total_amount_      IN NUMBER,
   currency_code_     IN VARCHAR2,
   allocation_method_ IN VARCHAR2 ) RETURN Period_Alloc_Head_Structure_Rec
IS
   rec_               Period_Alloc_Head_Structure_Rec;
   alloc_company_     VARCHAR2(20);
   alloc_id_          NUMBER;
BEGIN
   alloc_id_          := allocation_id_;
   alloc_company_     := company_;
   Period_Allocation_Rule_API.Create_New_Allocation_Head(alloc_id_, alloc_company_, site_, creator_, from_date_, until_date_, total_amount_, currency_code_, allocation_method_);  
   rec_.allocation_id := TO_NUMBER(alloc_id_);
   
   rec_.company       := alloc_company_;
   RETURN rec_;
END Create_New_Allocation___;


FUNCTION Get_Allocation_Status___(
   allocation_id_ IN NUMBER,
   creator_       IN VARCHAR2 )  RETURN VARCHAR2
IS
   status_  VARCHAR2(5); 
BEGIN
   status_ := Period_Allocation_Rule_API.Get_Open_Status(allocation_id_, creator_);
   RETURN status_;
END Get_Allocation_Status___;


PROCEDURE Distribute_Alloc_Lines___ (
   objkey_ IN VARCHAR2 ) 
IS
   period_alloc_rule_line_rec_   Period_Allocation_Rule_Line_Virtual_Rec;   
   period_alloc_rule_rec_        Period_Allocation_Rule_Virtual_Rec;
   new_period_alloc_rule_rec_    Period_Allocation_Rule_Virtual_Rec;
   key_                          Period_Allocation_Rule_Virtual_Key;
   total_allocation_amount_      NUMBER;
   total_allocation_percent_     NUMBER;
   alloc_tab_                    Period_Allocation_Rule_API.Public_Allocation_Tab;  
   
BEGIN
   key_.objkey := objkey_;
   period_alloc_rule_rec_ := Get_Record___(key_);
   User_Finance_API.Exist_Current_User(period_alloc_rule_rec_.company);
   DELETE 
   FROM ${PROJECTION}_PERIOD_ALLOCATION_RULE_LINE_VIRTUAL_VRT
   WHERE parent_objkey = objkey_;
   
   alloc_tab_ := Period_Allocation_Rule_API.Distribute_Allocations( period_alloc_rule_rec_.company, 
                                                                    period_alloc_rule_rec_.from_date, 
                                                                    period_alloc_rule_rec_.until_date, 
                                                                    period_alloc_rule_rec_.total_amount, 
                                                                    NVL(period_alloc_rule_rec_.allocation_method,'E'), 
                                                                    period_alloc_rule_rec_.currency_code);  
                                       
   IF (alloc_tab_.COUNT>0) THEN
      FOR i_ IN alloc_tab_.FIRST.. alloc_tab_.LAST LOOP        
         period_alloc_rule_line_rec_.allocation_id         := period_alloc_rule_rec_.allocation_id;
         period_alloc_rule_line_rec_.alloc_line_id         := Period_Allocation_Rule_API.Get_Next_Alloc_Line_Seq;
         period_alloc_rule_line_rec_.accounting_year       := alloc_tab_(i_).accounting_year;
         period_alloc_rule_line_rec_.accounting_period     := alloc_tab_(i_).accounting_period;
         period_alloc_rule_line_rec_.period                := period_alloc_rule_line_rec_.accounting_year ||' '|| LPAD(period_alloc_rule_line_rec_.accounting_period, 2, '0');
         period_alloc_rule_line_rec_.allocation_percentage := alloc_tab_(i_).percentage/100;
         period_alloc_rule_line_rec_.allocation_amount     := alloc_tab_(i_).amount;
         period_alloc_rule_line_rec_.allocation_diff       := FALSE;           
         New_Detail___(key_, period_alloc_rule_line_rec_);
         total_allocation_amount_  := total_allocation_amount_ + alloc_tab_(i_).amount;
         total_allocation_percent_ := total_allocation_percent_ + alloc_tab_(i_).percentage / 100;      
      END LOOP;
      
      new_period_alloc_rule_rec_                             := period_alloc_rule_rec_;
      new_period_alloc_rule_rec_.total_allocation_amount     := total_allocation_amount_;
      new_period_alloc_rule_rec_.total_allocation_percentage := total_allocation_percent_;
      new_period_alloc_rule_rec_.modified_alloc_parameters   := false;
      new_period_alloc_rule_rec_.allocation_details_edited   := true;
      CRUD_Update___(period_alloc_rule_rec_, new_period_alloc_rule_rec_);
   END IF; 
END Distribute_Alloc_Lines___;


@Override
PROCEDURE CRUD_Create___ (
   rec_ IN OUT Period_Allocation_Rule_Virtual_Rec )
IS
   old_rec_        Period_Allocation_Rule_Virtual_Rec;
   new_rec_        Period_Allocation_Rule_Virtual_Rec;
   key_            Period_Allocation_Rule_Virtual_Key;
BEGIN
   rec_.allocation_details_edited  := false;
   super(rec_);
   
   Populate_Period_Allocation_Rule___(rec_.objkey, 
                                      rec_.allocation_id);
   key_.objkey := rec_.objkey;
   old_rec_    := Get_Record___(key_);
   new_rec_    := old_rec_;
   CRUD_Update___(old_rec_, new_rec_);
END CRUD_Create___;


PROCEDURE Populate_Period_Allocation_Rule___ (
   parent_objkey_   IN VARCHAR2,
   allocation_id_   IN NUMBER)
IS
   period_alloc_rule_rec_       Period_Allocation_Rule_Virtual_Rec;
   period_alloc_rule_line_rec_  Period_Allocation_Rule_Line_Virtual_Rec;
   key_                         Period_Allocation_Rule_Line_Virtual_Key;
   old_rec_                     Period_Allocation_Rule_Line_Virtual_Rec;   
   last_row_percentage_         NUMBER;
   total_alloc_amount_          NUMBER;
   total_alloc_percentage_      NUMBER;
   
   CURSOR get_period_alloc_rule IS
      SELECT *
      FROM   period_allocation_rule
      WHERE  allocation_id    = allocation_id_;
      
   CURSOR get_period_alloc_rule_line IS
      SELECT *
      FROM   period_alloc_rule_line
      WHERE  allocation_id    = allocation_id_;
      
BEGIN
   IF allocation_id_ IS NOT NULL THEN
      
      FOR rec_ IN get_period_alloc_rule LOOP
         period_alloc_rule_rec_.objkey             := sys_guid();
         period_alloc_rule_rec_.from_date          := rec_.from_date;
         period_alloc_rule_rec_.until_date         := rec_.until_date;
         period_alloc_rule_rec_.currency_code      := rec_.currency_code;
         period_alloc_rule_rec_.allocation_method  := rec_.distr_type;
         period_alloc_rule_rec_.allocation_source  := Period_Allocation_Rule_API.Get_Creator_Desc(rec_.creator);
      END LOOP;
      
      FOR rec_ IN get_period_alloc_rule_line LOOP
         period_alloc_rule_line_rec_.objkey                 := sys_guid();
         period_alloc_rule_line_rec_.parent_objkey          := parent_objkey_;
         period_alloc_rule_line_rec_.allocation_id          := allocation_id_;
         period_alloc_rule_line_rec_.alloc_line_id          := rec_.alloc_line_id;
         period_alloc_rule_line_rec_.accounting_year        := rec_.accounting_year;
         period_alloc_rule_line_rec_.accounting_period      := rec_.accounting_period;
         period_alloc_rule_line_rec_.allocation_percentage  := rec_.percentage/100;
         period_alloc_rule_line_rec_.allocation_amount      := rec_.amount;
         period_alloc_rule_line_rec_.allocation_diff        := Text_To_Boolean___(rec_.allocation_diff);
         period_alloc_rule_line_rec_.period                 := rec_.accounting_year ||' '|| LPAD(rec_.accounting_period, 2, '0');

         Crud_Create___(period_alloc_rule_line_rec_);
         total_alloc_amount_     := total_alloc_amount_ + period_alloc_rule_line_rec_.allocation_amount;
         total_alloc_percentage_ := total_alloc_percentage_ + period_alloc_rule_line_rec_.allocation_percentage;
      END LOOP;

      -- Adjusting the last row to fit with total 100 allocation percentage.
      IF (total_alloc_percentage_ > 0 AND total_alloc_percentage_ != 1) THEN
         last_row_percentage_ := period_alloc_rule_line_rec_.allocation_percentage + (1 - total_alloc_percentage_);
         key_.objkey          := period_alloc_rule_line_rec_.objkey;
         old_rec_             := Get_Record___(key_);
         period_alloc_rule_line_rec_ := old_rec_;
         period_alloc_rule_line_rec_.allocation_percentage := last_row_percentage_;

         CRUD_Update___(old_rec_, period_alloc_rule_line_rec_);
         total_alloc_percentage_ := 1;
      END IF;
      total_alloc_percentage_ := total_alloc_percentage_ * 100;
   END IF;
END Populate_Period_Allocation_Rule___;


PROCEDURE Save_Period_Allocation_Rule___ (
   objkey_ IN VARCHAR2 ) 
IS
   period_alloc_rule_rec_      Period_Allocation_Rule_Virtual_Rec;
   key_                        Period_Allocation_Rule_Virtual_Key;
   new_rule_line_rec_          period_alloc_rule_line_tab%ROWTYPE;
   status_                     VARCHAR2(5);
   
BEGIN
   key_.objkey := objkey_;
   period_alloc_rule_rec_ := Get_Record___(key_);
   User_Finance_API.Exist_Current_User(period_alloc_rule_rec_.company);
   status_  := Get_Allocation_Status___(period_alloc_rule_rec_.allocation_id, period_alloc_rule_rec_.creator);
   IF (status_ = 'Q' OR period_alloc_rule_rec_.from_date IS NULL OR period_alloc_rule_rec_.until_date IS NULL OR period_alloc_rule_rec_.allocation_id IS NULL) THEN
      RETURN;                                     
   ELSE
      Compare_Allocation_Distribution___(objkey_);    
      Period_Allocation_Rule_API.Modify_Allocation_Head(period_alloc_rule_rec_.allocation_id, 
                                                        period_alloc_rule_rec_.allocation_method, 
                                                        period_alloc_rule_rec_.from_date, 
                                                        period_alloc_rule_rec_.until_date, 
                                                        period_alloc_rule_rec_.total_amount);
      DELETE 
      FROM  period_alloc_rule_line_tab
      WHERE allocation_id  = period_alloc_rule_rec_.allocation_id;
 
      FOR rec_ IN Get_Period_Allocation_Rule_Virtuals___(key_) LOOP           
         new_rule_line_rec_.allocation_id      := rec_.allocation_id;
         new_rule_line_rec_.alloc_line_id      := rec_.alloc_line_id;
         new_rule_line_rec_.accounting_year    := rec_.accounting_year;
         new_rule_line_rec_.accounting_period  := rec_.accounting_period;
         new_rule_line_rec_.percentage         := rec_.allocation_percentage*100;
         new_rule_line_rec_.amount             := rec_.allocation_amount;
         new_rule_line_rec_.allocation_diff    := rec_.allocation_diff;            
         Period_Alloc_Rule_Line_API.New(new_rule_line_rec_);
      END LOOP; 
   END IF;
END Save_Period_Allocation_Rule___;

   
FUNCTION Exist_Period_Alloc_Rule_Line___ (
   parent_objkey_   IN VARCHAR2 ) RETURN BOOLEAN
IS
   dummy_  NUMBER;
   CURSOR exist_period_alloc_rule_line IS 
      SELECT 1
      FROM ${PROJECTION}_PERIOD_ALLOCATION_RULE_LINE_VIRTUAL_VRT
      WHERE parent_objkey = parent_objkey_;
BEGIN
   OPEN exist_period_alloc_rule_line;
   FETCH exist_period_alloc_rule_line INTO dummy_;
   IF (exist_period_alloc_rule_line%FOUND) THEN
      CLOSE exist_period_alloc_rule_line;
      RETURN TRUE;
   END IF;
   CLOSE exist_period_alloc_rule_line;
   RETURN FALSE;
END Exist_Period_Alloc_Rule_Line___; 


--PROCEDURE Rollback_Period_Allocation_Rule___ (
--   objkey_ IN VARCHAR2 ) 
--IS
--   alloc_rule_rec_    Period_Allocation_Rule_Virtual_Rec;
--   rule_key_          Period_Allocation_Rule_Virtual_Key;
--   status_            VARCHAR2(5);
--BEGIN
--   rule_key_.objkey   := objkey_; 
--   alloc_rule_rec_    := Get_Record___(rule_key_); 
--   status_  := Get_Allocation_Status___(alloc_rule_rec_.allocation_id, alloc_rule_rec_.creator);
--   IF status_ = 'Q' THEN
--      RETURN;
--   ELSE
--      DELETE 
--      FROM ${PROJECTION}_PERIOD_ALLOCATION_RULE_VIRTUAL_VRT
--      WHERE objkey = objkey_; 
--
--      DELETE 
--      FROM ${PROJECTION}_PERIOD_ALLOCATION_RULE_LINE_VIRTUAL_VRT
--      WHERE parent_objkey = objkey_; 
--
--      IF (alloc_rule_rec_.allocation_id != 0) THEN
--         Exist_Any_Rule_Line___(alloc_rule_rec_.allocation_id);
--      END IF;
--      CRUD_Delete___(alloc_rule_rec_);
--   END IF;
--END Rollback_Period_Allocation_Rule___;


FUNCTION Validate_Allocation_Percentage___(
   parent_objkey_         IN VARCHAR2,
   alloc_percentage_      IN NUMBER,
   alloc_amount_          IN NUMBER)  RETURN NUMBER
IS
   allocation_amount_      NUMBER;
   key_                    Period_Allocation_Rule_Virtual_Key;
   period_alloc_rule_rec_  Period_Allocation_Rule_Virtual_Rec;
BEGIN
   key_.objkey := parent_objkey_;
   period_alloc_rule_rec_ := Get_Record___(key_);
   allocation_amount_ := alloc_amount_;
   Period_Allocation_Rule_API.Calc_Amount_From_Percent(allocation_amount_, 
                                                       period_alloc_rule_rec_.company, 
                                                       period_alloc_rule_rec_.total_amount, 
                                                       alloc_percentage_ * 100);        
   RETURN allocation_amount_;
END Validate_Allocation_Percentage___;


FUNCTION Validate_Allocation_Amount___(
   parent_objkey_     IN VARCHAR2,
   alloc_percentage_  IN NUMBER,
   alloc_amount_      IN NUMBER )  RETURN NUMBER
IS
   allocation_percentage_ NUMBER;
   key_                   Period_Allocation_Rule_Virtual_Key;
   period_alloc_rule_rec_ Period_Allocation_Rule_Virtual_Rec;
BEGIN
   key_.objkey := parent_objkey_;
   period_alloc_rule_rec_ := Get_Record___(key_);
   allocation_percentage_ := alloc_percentage_;
   Period_Allocation_Rule_API.Calc_Percent_From_Amount(allocation_percentage_, 
                                                       period_alloc_rule_rec_.company, 
                                                       period_alloc_rule_rec_.total_amount, 
                                                       alloc_amount_);                                                      
   RETURN allocation_percentage_;
END Validate_Allocation_Amount___;


FUNCTION Boolean_To_Text___ (
   value_ IN BOOLEAN) RETURN VARCHAR2
IS
BEGIN
   IF value_ THEN
      RETURN 'TRUE';
   ELSE
      RETURN 'FALSE';
   END IF;
END Boolean_To_Text___;


FUNCTION Text_To_Boolean___ (
   value_ IN VARCHAR2) RETURN BOOLEAN
IS
BEGIN
   IF value_ = 'TRUE' THEN
      RETURN TRUE;
   ELSE
      RETURN FALSE;
   END IF;
END Text_To_Boolean___;


PROCEDURE Compare_Allocation_Distribution___ (
   objkey_ IN VARCHAR2 ) 
IS
   period_alloc_rule_rec_  Period_Allocation_Rule_Virtual_Rec;
   key_                    Period_Allocation_Rule_Virtual_Key;
   sum_percentage_         NUMBER;
   sum_amount_             NUMBER;
   
   CURSOR sum_lines IS
      SELECT SUM(NVL(allocation_percentage,0)),
             SUM(NVL(allocation_amount,0))
      FROM  ${PROJECTION}_PERIOD_ALLOCATION_RULE_LINE_VIRTUAL_VRT
      WHERE parent_objkey = objkey_;  

BEGIN
   key_.objkey := objkey_;
   period_alloc_rule_rec_ := Get_Record___(key_);
   
   OPEN  sum_lines;
   FETCH sum_lines INTO sum_percentage_, sum_amount_;
   CLOSE sum_lines;
   
   IF (period_alloc_rule_rec_.total_amount IS NOT NULL) THEN
      IF (sum_amount_ != period_alloc_rule_rec_.total_amount) THEN
         Error_SYS.Record_General( lu_name_, 'DAMTERR: Distributed Amount :P1 is not equal to Total Amount',sum_amount_);
      END IF;
   ELSE
      IF (sum_percentage_*100 != 100) THEN
         Error_SYS.Record_General( lu_name_, 'DPRCERR: Distributed Percentage :P1 is not equal to 100',sum_percentage_);
      END IF;
   END IF;
END Compare_Allocation_Distribution___;


PROCEDURE Exist_Any_Rule_Line___ (
   allocation_id_ IN OUT NUMBER) 
IS
BEGIN
   IF allocation_id_ IS NOT NULL THEN
      Period_Allocation_Rule_API.Exist_Any_Line(allocation_id_);
   END IF;
END Exist_Any_Rule_Line___;


@Override
PROCEDURE CRUD_Delete___ (
   rec_ IN Period_Allocation_Rule_Line_Virtual_Rec )
IS
   old_header_rec_    Period_Allocation_Rule_Virtual_Rec;
   new_header_rec_    Period_Allocation_Rule_Virtual_Rec;
   key_               Period_Allocation_Rule_Virtual_Key;
BEGIN
   key_.objkey := rec_.parent_objkey;
   old_header_rec_ := Get_Record___(key_);
   new_header_rec_ := old_header_rec_;
   new_header_rec_.total_allocation_amount     := new_header_rec_.total_allocation_amount - rec_.allocation_amount;
   new_header_rec_.total_allocation_percentage := new_header_rec_.total_allocation_percentage - rec_.allocation_percentage;
   new_header_rec_.allocation_details_edited   := TRUE;
   super(rec_); 
   CRUD_Update___(old_header_rec_, new_header_rec_);
END CRUD_Delete___;


@Override 
PROCEDURE CRUD_Update___ (
   old_ IN Period_Allocation_Rule_Line_Virtual_Rec,
   new_ IN Period_Allocation_Rule_Line_Virtual_Rec )
IS
   old_header_rec_      Period_Allocation_Rule_Virtual_Rec;
   new_header_rec_      Period_Allocation_Rule_Virtual_Rec;
   new_rec_             Period_Allocation_Rule_Line_Virtual_Rec;
   key_                 Period_Allocation_Rule_Virtual_Key;
BEGIN
   key_.objkey := old_.parent_objkey;
   old_header_rec_ := Get_Record___(key_);
   IF (new_.allocation_amount IS NOT NULL) THEN
      new_rec_ := new_;
      new_rec_.allocation_amount := Currency_Amount_API.Get_Rounded_Amount(old_header_rec_.company, old_header_rec_.currency_code, new_rec_.allocation_amount);
   END IF;
   super(old_, new_rec_);   
   new_header_rec_ := old_header_rec_;
   new_header_rec_.total_allocation_amount     := new_header_rec_.total_allocation_amount + new_rec_.allocation_amount - old_.allocation_amount;
   new_header_rec_.total_allocation_percentage := new_header_rec_.total_allocation_percentage + new_rec_.allocation_percentage - old_.allocation_percentage;
   new_header_rec_.allocation_details_edited   := TRUE;
   CRUD_Update___(old_header_rec_, new_header_rec_);
END CRUD_Update___;