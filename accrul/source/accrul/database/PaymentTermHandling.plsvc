-----------------------------------------------------------------------------
--
--  Logical unit: PaymentTermHandling
--  Component:    ACCRUL
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
-----------------------------------------------------------------------------

layer Core;

@ApproveGlobalVariable
company_             VARCHAR2(20);
@ApproveGlobalVariable
pay_term_id_         VARCHAR2(20);
@ApproveGlobalVariable
installment_number_  NUMBER;
@ApproveGlobalVariable
day_from_            NUMBER;
@ApproveGlobalVariable
check_value_         VARCHAR2(5) := 'FALSE';

@Override
PROCEDURE CRUD_Create___ (
   etag_    IN OUT VARCHAR2,
   key_     IN OUT Payment_Term_Details_Key,
   attr_    IN OUT VARCHAR2,
   info_    OUT    VARCHAR2,
   action_  IN     VARCHAR2 )
IS
BEGIN
   super(etag_, key_, attr_, info_, action_);
   company_            := key_.company;
   pay_term_id_        := key_.pay_term_id;
   installment_number_ := key_.installment_number;
   day_from_           := key_.day_from; 
   check_value_        := 'FALSE';
END CRUD_Create___;

@Override
PROCEDURE CRUD_Update___ (
   etag_    IN OUT VARCHAR2,
   key_     IN OUT Payment_Term_Details_Key,
   attr_    IN OUT VARCHAR2,
   info_    OUT    VARCHAR2,
   action_  IN     VARCHAR2 )
IS
BEGIN
   super(etag_, key_, attr_, info_, action_);
   company_            := key_.company;
   pay_term_id_        := key_.pay_term_id;   
   installment_number_ := key_.installment_number;   
   day_from_           := key_.day_from; 
   check_value_        := 'FALSE';
END CRUD_Update___;

@Override
PROCEDURE CRUD_Delete___ (
   etag_    IN OUT VARCHAR2,
   key_     IN     Payment_Term_Details_Key,
   info_    OUT    VARCHAR2,
   action_  IN     VARCHAR2 )
IS
BEGIN
   super(etag_, key_, info_, action_);
   company_            := key_.company;
   pay_term_id_        := key_.pay_term_id;   
   installment_number_ := key_.installment_number;
   day_from_           := key_.day_from; 
   check_value_        := 'TRUE';
END CRUD_Delete___;  


PROCEDURE Net_Amnt_Percentage_Validate___ (
   init_ IN BOOLEAN )
IS   
   net_amount_percentage_ NUMBER := 0;
   rec_exist_             VARCHAR2(5) := 'TRUE';
   prev_day_to_           NUMBER := 0;
   seq_val_               VARCHAR2(5) := 'FALSE';
   check_val_             VARCHAR2(5) := 'TRUE';
   final_day_             VARCHAR2(5) := 'FALSE';
   day_to_                NUMBER := 0;
   inst_count_            NUMBER := 0;
BEGIN
   IF (init_) THEN
      company_            := NULL;
      pay_term_id_        := NULL;
      installment_number_ := NULL;
      day_from_           := NULL;
   ELSE
      net_amount_percentage_ := Payment_Term_Details_API.Get_Total_Percentage(company_, pay_term_id_);
      rec_exist_             := Payment_Term_Details_API.Installment_Exist(company_, pay_term_id_);
      day_to_                := Payment_Term_Details_API.Get_Day_To(company_, pay_term_id_, installment_number_, day_from_);
      inst_count_            := Payment_Term_Details_API.Get_Specific_Range(company_, pay_term_id_, installment_number_);

      IF (((net_amount_percentage_ IS NULL) OR (net_amount_percentage_ != 100)) AND ((rec_exist_ = 'TRUE') OR (check_value_ = 'FALSE'))) THEN
         Error_SYS.Record_General(lu_name_, 'ERRORSUMNETAM: The total sum of Net Amount Percentage must be 100 % !');
      END IF;
      
      IF (day_from_ = 1 ) THEN
         prev_day_to_ := day_to_;
      ELSE
         IF (day_from_ != prev_day_to_ + 1) THEN
            seq_val_ := 'TRUE';
         END IF;
         prev_day_to_ := day_to_;
      END IF;
      
      IF (day_to_ = 31) THEN 
         final_day_ := 'TRUE';
      END IF;
      IF ((seq_val_ = 'TRUE') OR (final_day_ = 'FALSE'))THEN
         check_val_ := 'FALSE';
      END IF;
      
      Payment_Term_Details_API.Validate_installment_Range(company_, pay_term_id_, installment_number_, day_to_); 

      Payment_Term_Details_API.Regen_Installments(company_, pay_term_id_);
   END IF;
END Net_Amnt_Percentage_Validate___;


FUNCTION Get_Next_Item_Id___(
   company_       IN VARCHAR2,
   pay_term_id_   IN VARCHAR2 ) RETURN NUMBER 
IS
   installment_num_ NUMBER;
   CURSOR get_next_id IS
      SELECT MAX(installment_number)
      FROM   payment_term_details_tab
      WHERE  company     = company_
      AND    pay_term_id = pay_term_id_;
BEGIN
   OPEN  get_next_id;
   FETCH get_next_id INTO installment_num_;
   CLOSE get_next_id;
   installment_num_ := nvl(installment_num_,0)+1;
   RETURN installment_num_;
END Get_Next_Item_Id___;

@Override 
PROCEDURE CRUD_Default___(
   key_  IN     Payment_Term_Details_Key,
   attr_ IN OUT VARCHAR2,
   info_ OUT    VARCHAR2 )
IS
   rec_                   Payment_Term_Details_Tab%ROWTYPE;
   dummy_installment_num_ NUMBER;
   vat_dist_db_           VARCHAR2(30);
BEGIN
   rec_.company           := Client_SYS.Get_Item_Value('COMPANY', attr_); 
   rec_.pay_term_id       := Client_SYS.Get_Item_Value('PAY_TERM_ID', attr_); 
   installment_number_    := Get_Next_Item_Id___(rec_.company, rec_.pay_term_id);
   dummy_installment_num_ := installment_number_;  
   vat_dist_db_           := Payment_Term_API.Get_Vat_Distribution_Db(rec_.company, rec_.pay_term_id);
   super(key_, attr_, info_);
   Client_SYS.Set_Item_Value('DUMMY_INSTALLMENT_NUM', dummy_installment_num_, attr_);
   Client_SYS.Set_Item_Value('INSTALLMENT_NUMBER', installment_number_, attr_);
   Client_SYS.Set_Item_Value('DAY_FROM', 1, attr_);
   Client_SYS.Set_Item_Value('DAY_TO', 31, attr_);
   IF (vat_dist_db_ = 'FIRSTINSTONLYTAX') THEN 
      Client_SYS.Set_Item_Value('DAYS_TO_DUE_DATE', 0, attr_);
      Client_SYS.Set_Item_Value('NET_AMOUNT_PERCENTAGE', 0, attr_);
   END IF;
   Client_SYS.Set_Item_Value('FREE_DELIVERY_MONTHS', 0, attr_);
   Client_SYS.Set_Item_Value('END_OF_MONTH', 'FALSE', attr_);
   Client_SYS.Set_Item_Value('DISCOUNT_SPECIFIED', 'FALSE', attr_);
END CRUD_Default___;

PROCEDURE Create_Automatic_Payment_Plan___(
   company_                 IN VARCHAR2,
   pay_term_id_             IN VARCHAR2,
   no_of_installments_      IN NUMBER,
   no_of_free_deliv_months_ IN NUMBER,
   days_to_due_date_        IN NUMBER, 
   institute_id_            IN VARCHAR2,
   way_id_                  IN VARCHAR2,
   end_of_month_            IN BOOLEAN,
   due_day1_                IN NUMBER,
   due_day2_                IN NUMBER,
   due_day3_                IN NUMBER )
IS 
BEGIN
   Payment_Term_Details_API.Create_Automatic_Payment_Plan(company_, pay_term_id_, no_of_installments_, no_of_free_deliv_months_, days_to_due_date_, institute_id_, way_id_, end_of_month_, due_day1_, due_day2_, due_day3_);
END Create_Automatic_Payment_Plan___;

@DynamicComponentDependency FIXASS
FUNCTION Get_Reduct_Cash_Disc___(
   company_                    IN VARCHAR2,
   cash_disc_fixass_acq_value_ IN BOOLEAN ) RETURN VARCHAR2
IS   
BEGIN
   Payment_Term_API.Get_Reduct_Cash_Disc_Val(company_, cash_disc_fixass_acq_value_);
   RETURN 'TRUE';
END Get_Reduct_Cash_Disc___;

PROCEDURE Get_Next_Day_From (
   day_from_ IN OUT NUMBER,
   day_to_ IN OUT NUMBER
   )
IS 
BEGIN
   IF (day_to_ != 31 AND day_to_ IS NOT NULL) THEN
      day_from_ := day_to_;
      day_to_ := 31;
   END IF;
END Get_Next_Day_From;

@Override
PROCEDURE CRUD_Default_Copy___ (
   rec_ IN OUT Payment_Term_Details_Rec )
IS
BEGIN
   super(rec_);
   Get_Next_Day_From(rec_.day_from, rec_.day_to);
END CRUD_Default_Copy___;
