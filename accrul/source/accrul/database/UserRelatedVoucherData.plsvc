-----------------------------------------------------------------------------
--
--  Logical unit: UserRelatedVoucherData
--  Component:    ACCRUL
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
-----------------------------------------------------------------------------

layer Core;

@Override
PROCEDURE CRUD_Create___ (
   etag_ IN OUT VARCHAR2,
   key_  IN OUT Voucher_No_Serial_Key,
   attr_ IN OUT VARCHAR2,
   info_ OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS   
BEGIN
   Check_Common__(key_, attr_, 'CREATE');
   super(etag_, key_, attr_, info_, action_);
END CRUD_Create___;

@Override
PROCEDURE CRUD_Update___ (
   etag_ IN OUT VARCHAR2,
   key_  IN OUT Voucher_No_Serial_Key,
   attr_ IN OUT VARCHAR2,
   info_ OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
BEGIN
   Check_Common__(key_, attr_, 'UPDATE');
   super(etag_, key_, attr_, info_, action_);
END CRUD_Update___;

PROCEDURE Check_Common__ (
   key_             IN OUT Voucher_No_Serial_Key,
   attr_            IN VARCHAR2,
   action_          IN VARCHAR2 )
IS
   company_          VARCHAR2(20);
   voucher_type_     VARCHAR2(3);
   acc_year_string_  VARCHAR2(5);
   accounting_year_  NUMBER;
   period_           NUMBER;
   from_number_      NUMBER;
   until_number_     NUMBER;
   dummy_            NUMBER;
   
   CURSOR check_range IS
      SELECT  1
      FROM    voucher_no_serial_tab v
      WHERE   v.company          = company_
      AND     v.voucher_type     = voucher_type_
      AND     v.accounting_year  = accounting_year_
      AND NOT (v.period          = period_)
      AND NOT (v.serie_from > until_number_ OR  v.serie_until < from_number_);
      
   CURSOR get_from_number IS
      SELECT serie_from
      FROM   voucher_no_serial_tab
      WHERE  company          = company_
      AND    voucher_type     = voucher_type_
      AND    accounting_year  = accounting_year_
      AND    period           = period_;
BEGIN
   IF (action_ = 'CREATE') THEN
      acc_year_string_  := Client_SYS.Get_Item_Value('ACCOUNTING_YEAR', attr_);
      IF (LENGTH(acc_year_string_) < 4) THEN
         Error_SYS.Record_General(lu_name_, 'WRONGYEARFORMAT: Year must be entered with 4 digits');
      END IF;
      from_number_      := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('SERIE_FROM', attr_));
      IF (from_number_ < 0) THEN
         Error_SYS.Record_General(lu_name_, 'NEGATIVEFROMNUMBER: From Number must be larger than 0');
      END IF;
      company_          := Client_SYS.Get_Item_Value('COMPANY', attr_);
      voucher_type_     := Client_SYS.Get_Item_Value('VOUCHER_TYPE', attr_);
      accounting_year_  := Client_SYS.Attr_Value_To_Number(acc_year_string_);
      period_           := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('PERIOD', attr_));
      until_number_     := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('SERIE_UNTIL', attr_));
   ELSIF (action_ = 'UPDATE') THEN
      company_          := key_.company;
      voucher_type_     := key_.voucher_type;
      accounting_year_  := key_.accounting_year;
      period_           := key_.period;
      until_number_     := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('SERIE_UNTIL', attr_));
      IF (until_number_ IS NOT NULL) THEN
         OPEN  get_from_number;
         FETCH get_from_number INTO from_number_;
         CLOSE get_from_number;
      END IF;
   END IF;
   IF (until_number_ IS NOT NULL) THEN
      IF (until_number_ < 0) THEN
         Error_SYS.Record_General(lu_name_, 'NEGATIVEUNTILNUMBER: Until Number must be larger than 0');
      END IF;
      OPEN check_range;
      FETCH check_range INTO dummy_;
      IF (check_range%FOUND) THEN
         CLOSE check_range;
         Error_SYS.Record_General(lu_name_, 'RANGEEXISTS: The Voucher Number Already Exists in Another Range');
      END IF;
      CLOSE check_range;
   END IF;
END Check_Common__;

FUNCTION Get_Same_User_Group_Exists___(
   full_selection_        IN VARCHAR2,
   user_group_            IN VARCHAR2,
   function_group_        IN VARCHAR2,
   single_function_group_ IN BOOLEAN) RETURN Result_Allowed_Year_Struct_Rec
IS
   selection_              VARCHAR2(2000) := CONCAT(full_selection_, ';');
   current_selection_      VARCHAR2(200);
   company_                voucher_no_serial_tab.company%TYPE;
   voucher_type_           voucher_no_serial_tab.voucher_type%TYPE;
   accounting_year_        voucher_no_serial_tab.accounting_year%TYPE;
   rec_                    Result_Allowed_Year_Struct_Rec;
BEGIN
   WHILE (INSTR(selection_, ';') > 0) LOOP
      current_selection_ := substr(selection_, 0, INSTR(selection_, ';'));
      company_           := Client_SYS.Get_Key_Reference_Value(current_selection_, 'COMPANY');
      voucher_type_      := Client_SYS.Get_Key_Reference_Value(current_selection_, 'VOUCHER_TYPE');
      accounting_year_   := Client_SYS.Get_Key_Reference_Value(current_selection_, 'ACCOUNTING_YEAR');
      IF (single_function_group_ = FALSE)THEN
         IF (Voucher_Type_User_Group_API.Check_User_Group(company_, user_group_, voucher_type_, accounting_year_) = 'TRUE') THEN
            rec_.user_group_exists     := 'TRUE';
         ELSE
            rec_.user_group_not_exists := 'TRUE';
            rec_.allowed_years         := rec_.allowed_years || accounting_year_ || '^';
         END IF;
      ELSIF (single_function_group_ = TRUE) THEN
         IF (Voucher_Type_User_Group_API.Check_User_Group(company_, user_group_, voucher_type_, accounting_year_, function_group_) = 'TRUE') THEN
            rec_.user_group_exists     := 'TRUE';
         ELSE
            rec_.user_group_not_exists := 'TRUE';
            rec_.allowed_years         := rec_.allowed_years || accounting_year_ || '^';
         END IF;
      END IF;
      selection_ := substr(selection_, INSTR(selection_, ';')+1);      
   END LOOP;
   RETURN rec_;
END Get_Same_User_Group_Exists___;

FUNCTION Get_Keys_From_Selection___(
   selection_ IN VARCHAR2 ) RETURN Voucher_Keys_Struct_Rec
IS
   rec_  Voucher_Keys_Struct_Rec;
BEGIN
   rec_.company := Client_SYS.Get_Key_Reference_Value(selection_, 'COMPANY');
   rec_.voucher_type := Client_SYS.Get_Key_Reference_Value(selection_, 'VOUCHER_TYPE');
   RETURN rec_;
END Get_Keys_From_Selection___;

PROCEDURE Do_Create_User_Group_For_Voucher_Type___ (
   company_             IN VARCHAR2,
   voucher_type_        IN VARCHAR2,
   accounting_years_    IN VARCHAR2,
   user_group_          IN VARCHAR2,
   authorization_level_ IN VARCHAR2,
   default_type_        IN BOOLEAN,
   function_group_      IN VARCHAR2 )
IS
   acc_years_           VARCHAR2(2000) := accounting_years_;
   accounting_year_     NUMBER;
   def_type_            VARCHAR2(5);
BEGIN
   IF (default_type_) THEN
      def_type_ := Finance_Yes_No_API.Decode('Y');
   ELSE
      def_type_ := Finance_Yes_No_API.Decode('N');
   END IF;
   WHILE (INSTR(acc_years_, '^') > 0) LOOP
      accounting_year_  := TO_NUMBER(substr(acc_years_, 0, INSTR(acc_years_, '^')-1));      
      Voucher_Type_User_Group_API.Create_Vou_Type_User_Group(company_,
                                                             accounting_year_,
                                                             user_group_,
                                                             voucher_type_,
                                                             Authorize_Level_API.Decode(authorization_level_),
                                                             def_type_,
                                                             function_group_);
      acc_years_        := substr(acc_years_, INSTR(acc_years_, '^')+1);
   END LOOP;
END Do_Create_User_Group_For_Voucher_Type___;

PROCEDURE Do_Set_Default___ (
   key_ IN Voucher_Type_User_Group_Key ) 
IS
   info_          VARCHAR2(100);
   attr_          VARCHAR2(50);
   objid_         voucher_type_user_group.objid%TYPE;
   objversion_    voucher_type_user_group.objversion%TYPE;
BEGIN
   Get_Objid_Objversion___(objid_, objversion_, key_);
   Client_SYS.Add_To_Attr('DEFAULT_TYPE', Finance_Yes_No_API.Decode('Y'), attr_);
   Voucher_Type_User_Group_API.Modify__(info_ , objid_, objversion_, attr_, 'DO');
END Do_Set_Default___;