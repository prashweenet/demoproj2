client CurrencyUpdateAssistant;
component ACCRUL;
layer Core;
projection CurrencyUpdateAssistantHandling;


include fragment ExtFileAssistant;
--------------------------------- FRAGMENTS ---------------------------------

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry CurrencyUpdateAssistantNav parent AccrulNavigator.CurrencyMenu at index 400 {
      label = "Currency Update Assistant";
      assistant Assistant;
   }
}
-------------------------------- MAIN PAGES ---------------------------------
assistant Assistant using TaskVirtualSet {
   label = "Currency Update Assistant";
   savemode = OnLostFocus;

   setup ExtFileAssistantSetup {
      variable FileTypeStr Text;
      variable SetIdStr Text;
      variable FileTemplateStr Text;
      variable FileDirectionStr Text;
      variable FileDirectionDbStr Text;

      execute {
         set FileType = "ExtCurrency";
         set SetId = SetIdStr;
         set FileTemplate = FileTemplateStr;
         set FileDirection = FileDirectionStr;
         set FileDirectionDb = FileDirectionDbStr;
      }
   }
   init command {
      variable Company Text;
      execute {
         set FileType = "ExtCurrency";
         set FileTypeParam = "ExtCurrency";
         set Company = "${context.Company}";
         call GetDefaultFileTypeInfo(Company, FileType, ProcessOptions) into DefaultInfo;
         set Company = DefaultInfo.Company;
         set SetId = DefaultInfo.SetId;
         set FileTemplate = DefaultInfo.FileTemplate;
         set ParamString = DefaultInfo.ParamString;
         set FileDirection = DefaultInfo.FileDirection;
         set FileDirectionDb = DefaultInfo.FileDirectionDb;
         set FileName = DefaultInfo.FileName;
      }
   }

   steps {
      step {
         label = "Set External File Type";
         group ProcessOptionsGroup;
         group FileOptionsGroup;
         fileselector {
            enabled = [FileDirectionDb = "1" and ProcessOptions = "Online"];
            multifile = [false];
            onfileselect {
               execute {
                  set FileName = component.UploadQueue.FileList;
                  call ChangeParamValues("FILE_NAME", FileName, ParamString) into ParamString;
               }
            }
            label = "Add File";
         }
         next command {
            enabled = [(FileDirectionDb = "1" and ProcessOptions = "Online" and not component.UploadQueue.IsEmpty)
            or(FileDirectionDb = "1" and ProcessOptions = "Batch")
            or(FileDirectionDb = "2" and FileName != null)];
            execute {
               call CreateFileTypeParamVal();
            }
         }
      }
      step {
         label = "Set Parameter Values";
         group FileTypeInfoGroup;
         list ExtFileTypeParamList(FileTypeParamArr);
         next command {
            enabled = [ProcessOptions = "Batch"];
         }
      }
      step {
         label = "Schedule";
         group SchedulingParametersGroup;
         group SchedulingStartAndStopDateGroup;
      }
      step {
         label = "Schedule Options";
         group ScheduledTasksAssistantAdvOpGroup;
         group ScheduledTasksAssistantStreamsGroup;
      }
      final step {
         markdowntext {
            text = "${ReturnInfo}";
         }
         command NavigateToExtTrans {
            label = "View External File Transactions";
            execute {
               navigate "page/ExternalFileTransactions/Form?$filter=LoadFileId eq ${LoadFileId}";
            }
         }
         command NavigateToScheduledTask {
            visible = [ProcessOptions = "Batch"];
         }
      }
   }
   finish command {
      variable ImportFileInfoVar Structure(ImportFileInfo);
      variable ExportFileInfoVar Structure(ExportFileInfo);
      variable IsXmlVar Text;
      enabled = [((component.Assistant.ActiveStep = 2 and ProcessOptions = "Online")
      or((component.Assistant.ActiveStep = 3)or(component.Assistant.ActiveStep = 4) and ProcessOptions = "Batch"))
      and((FileDirectionDb = "1" and ProcessOptions = "Online" and not component.UploadQueue.IsEmpty)
      or(FileDirectionDb = "1" and ProcessOptions = "Batch")
      or(FileDirectionDb = "2" and FileName != null))];

      execute {
         if [ProcessOptions = "Online"] {
            if[FileDirectionDb = "1"] {
               upload "TaskVirtualSet(Objkey=$[Objkey])/FileData";
               call ImportFile() into ImportFileInfoVar;
               set LoadFileId = ImportFileInfoVar.LoadFileId;
               set ReturnInfo = ImportFileInfoVar.Info;
            }
            else {
               call ExportFile() into ExportFileInfoVar;
               set LoadFileId = ExportFileInfoVar.LoadFileId;
               set IsXmlVar = ExportFileInfoVar.XmlData;

               if [IsXmlVar = "FALSE"] {
                  download "TaskVirtualSet(Objkey=$[Objkey])/FileData";
               }
               else {
                  download "TaskVirtualSet(Objkey=$[Objkey])/XmlData";
               }

               call GetFileLoadState(LoadFileId) into LoadState;
               set ReturnInfo = "The external file with the Load File ID ${LoadFileId} is in state ${LoadState}.";
            }
            call GetFileLoadStateDb(LoadFileId) into LoadStateDb;
         }
         else {
            call ScheduleTask() into ScheduledTask;
            set ScheduleId = ScheduledTask.ScheduleId;
            set ReturnInfo = "Task '${ScheduleName}', assigned with the Id '${ScheduleId}', was successfully scheduled to start ${ScheduledTask.ScheduledDate} at ${ScheduledTask.ScheduledTime}.";
         }
      }
   }
   cancel command {
      execute {
         navigate back;
      }
   }
}

--------------------------------- COMMANDS ----------------------------------


----------------------------- VISUAL COMPONENTS -----------------------------
