client PostingControlDetails;
component ACCRUL;
layer Core;
projection PostingControlDetailsHandling;

include fragment CopyDetailsSetup;
include fragment CopyToCompaniesAssistant;
include fragment AccountingCodePartsUsed2Selector;
include fragment AccountingCodePartValueLovSelector;
include fragment CtrlTypeAllowedValueSelector;
include fragment PostingControlDefValueLovExtended;


----------------------------- NAVIGATOR ENTRIES -----------------------------

-------------------------------- MAIN PAGES ---------------------------------
page Form using PostingCtrlSet {
   label = "Posting Control Details";

   selector PostingCtrlDataSelector;

   group PostingCtrlGroup;
   list PostingCtrlDetailList(PostingCtrlDetailArray);
   defaultsearchfields = PostingTypeRef, CodeNameRef, ControlType;
   command CopyDetailsSetupCommand;
}

page CntrlTypeForm using PostingCtrlSet {
   label = "Posting Control Navigator - Posting Control Details";
   searchcontext PageSearchContext {
      defaults = FetchPageSearchContextDefaults(ControlTypeValue);
   }
   selector PostingCtrlDataSelector;

   group PostingCtrlGroup;
   list PostingCtrlDetailList(PostingCtrlDetailArray) {
      filter = [ControlTypeValue = searchcontext.PageSearchContext.ControlTypeValue];
   }

   command CopyDetailsSetupCommand;
}

page PcForm using PostingCtrlSet {
   label = "Posting Control Navigator - Posting Control Details";
   selector PostingCtrlDataSelector;

   group PostingCtrlGroup;
   list PostingCtrlDetailList(PostingCtrlDetailArray);

   command CopyDetailsSetupCommand;
}

searchcontext PageSearchContext for PageSearchContextStructure {
   label = "";
   field ControlTypeValue {
      visible = [false];
   }
}
-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------
command CopyDetailsSetupCommand for PostingCtrl {
   label = "Copy Details Set-up";
   enabled = [PostingType != null];
   variable CompanyStr;

   execute {
      set CompanyStr = "${context.Company}";

      assistant CopyDetailsSetupAssistant(CompanyStr, PostingType, PostingTypeDesc, CodeName, ControlType, ConstrolTypeDesc, CodePart, Module, PcValidFrom, "PostingControlDetails") {
         when CANCEL {
            refresh;
         }
         when OK {
            refresh;
         }
      }
   }
}

command DetailsSpecificationCommand for PostingCtrlDetail {
   label = "Details Specification";
   enabled = [SpecControlType != null and SpecCtrlTypeCategory != "FixedValue" and SpecCtrlTypeCategory != "PrePosting"];
   execute {
      if [SpecCtrlTypeCategory = "Combination"] {
         navigate  "/page/PostingCtrlCombDetSpec/Form?$filter=Company eq $[Company] and CodePart eq $[CodePart] and PostingType eq $[PostingType] and PcValidFrom eq $[PcValidFrom] and ControlTypeValue eq $[ControlTypeValue] and ValidFrom eq $[ValidFrom] and SpecControlType eq $[SpecControlType]";
      }
      else {
         navigate  "/page/PostingControlDetailsSpec/Form?$filter=Company eq $[Company] and CodePart eq $[CodePart] and PostingType eq $[PostingType] and PcValidFrom eq $[PcValidFrom] and ControlTypeValue eq $[ControlTypeValue] and ValidFrom eq $[ValidFrom] and SpecControlType eq $[SpecControlType]";
      }
   }
}

command CopyToCompaniesCommand for PostingCtrlDetail {
   label = "Copy to Companies";
   enabled = [true];
   mode = SelectedRecords;
   variable CurrentCompanyVar;
   bulkexecute {
      set CurrentCompanyVar = "${context.Company}";
      assistant CopyToCompaniesAssistant(CurrentCompanyVar, "PostingCtrlDetail", "MANUAL", Selection, "Posting_Ctrl_Detail_API") {
         when OK {
            exit;
         }
      }
   }
}

command AutoCopyToCompaniesCommand for PostingCtrlDetail {
   label = "Copy to Companies";
   mode = SelectedRecords;
   variable CurrentCompanyVar;
   variable SelectionVar;
   variable StateVar;
   bulkexecute {
      set CurrentCompanyVar = "${context.Company}";
      call IsActiveLuExist(CurrentCompanyVar, "PostingCtrlDetail") into StateVar;
      if [StateVar = "TRUE"] {
         if[CreateCount > 0] {
            set SelectionVar = CreateList;
         }
         if[UpdateCount > 0] {
            set SelectionVar = UpdateList;
         }
         if[DeleteCount > 0] {
            set SelectionVar = DeleteList;
         }
         assistant CopyToCompaniesAssistant(CurrentCompanyVar, "PostingCtrlDetail", "AUTOMATIC", SelectionVar, "Posting_Ctrl_Detail_API") {
            when OK {
               exit;
            }
         }
      }
   }
}


--------------------------------- SELECTORS ---------------------------------
selector PostingCtrlDataSelector for PostingCtrl {
   label = "${PostingType} - ${CodeName} - ${ControlType}";
   static PostingType;
   static CodeName {
      label = "Code Part Name";
   }
   static ControlType;
}

@Override
selector ReferenceAccountingCodePartValueLovSelector for AccountingCodePartValueLov {
   static CodePart;
}

selector SpecDefaultValueRefSelector for AccountingCodePartValueLov {
   static Company;
   static CodePart;
   static CodePartValue;
   static Description;
}

selector SpecDefaultValueNoCtRefSelector for AccountingCodePartValueLov {
   static Company;
   static CodePart;
   static CodePartValue;
   static Description;
}

@Override
selector ReferencePostingCtrlPostingTypeSelector for PostingCtrlPostingType {
   orderby = Module, SortOrder;
}

---------------------------------- GROUPS -----------------------------------
group PostingCtrlGroup for PostingCtrl {
   label = "";
   lov PostingTypeRef with ReferencePostingCtrlPostingTypeSelector;

   lov CodeNameRef with ReferenceAccountingCodePartsUsed2Selector;
   field ControlType;
   field DefaultValue;
   field DefaultValueNoCt;
   field PcValidFrom;
}


----------------------------------- LISTS -----------------------------------
list PostingCtrlDetailList for PostingCtrlDetail {
   label = "";
   crudactions {
      after command AutoCopyToCompaniesCommand;
      new {
         enabled = [not(parent.CtrlTypeCategoryDb = "FIXED" or parent.CtrlTypeCategoryDb = "PREPOSTING")];
      }
   }
   field ControlType {
      columnexclude = [true];
   }
   field ControlTypeValueRef {
      label = "${parent.ControlTypeDescription}";
      validate command {
         variable DescriptionVar Text;
         execute {
            call GetControlTypeDescription(Company, ControlType, ControlTypeValue, Module, ValidFrom) into DescriptionVar;
            set ControlTypeValueDesc = DescriptionVar;
         }
      }
   }
   field ControlTypeValueDesc {
      size = Large;
   }

   fieldset PostingCtrlDetailsCodePartValueLovExtendedFieldSet;

   field NoCodePartValue {
      size = Small;
   }
   lov SpecControlTypeRef with ReferenceCtrlTypeAllowedValueSelector using GetSpecControlType {
      search = ControlType, ControlTypeDesc;
      description = SpecControlTypeRef.ControlTypeDesc;
      editable = [CodePartValue != null or parent.SCctEnabled != "FALSE"];
      validate command {
         variable CtrlTypeAllowedValueStructVar {
            type = Structue(CtrlTypeAllowedValueStruct);
         }

         execute {
            if [SpecControlType = null] {
               set SpecControlTypeDesc = null;
               set SpecModule = null;
               set SpecCtrlTypeCategory = null;
               set SpecDefaultValue = null;
               set SpecDefaultValueNoCt = null;
            }
            else {
               call GetCtrlTypeAllowedValue(Company, CodePart, PostingType, SpecControlType, SpecCtrlTypeCategory) into CtrlTypeAllowedValueStructVar;

               set SpecModule = CtrlTypeAllowedValueStructVar.Module;
               if [CtrlTypeAllowedValueStructVar.SpecCtrlTypeCategory != null] {
                  set SpecCtrlTypeCategory = CtrlTypeAllowedValueStructVar.SpecCtrlTypeCategory;
               }
               if[CtrlTypeAllowedValueStructVar.SpecCtrlTypeCategory = null or(SpecCtrlTypeCategory = "FixedValue") or(SpecCtrlTypeCategory = "PrePosting" and parent.AllowPrepostDetDb = "FALSE")] {
                  warning("Entered Specification Control Type does not exist or is not allowed.");
               }
               if[SpecDefaultValueNoCt != null  and(SpecCtrlTypeCategory = "FixedValue" or SpecCtrlTypeCategory = "PrePosting")] {
                  set SpecDefaultValueNoCt = null;
               }
            }
         }
      }
   }

   fieldset PostingControlSpecDefValueLovExtendedFieldSet;

   field ValidFrom;

   command DetailsSpecificationCommand;
   command CopyToCompaniesCommand;
}

----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------

-------------------------------- FIELD SETS ---------------------------------
fieldset PostingCtrlDetailsCodePartValueLovExtendedFieldSet clone PostingCtrlCodePartValueLovExtendedFieldSet {
   field CodePartValue {
      size = Large;
      lovswitch {
         when [CodePart = "A"] {
            lov CodePartValueRef with ReferenceAccountingCodePartValueLovSelector {
               description = CodePartValueRef.Description;
               search = CodePartValue, Description;
               editable = [SpecControlTypeRef = null];
               details = "page/Account/Form?contexts=Company:${Company}&$filter=(startswith(AccountSearch,'${CodePartValue}'))";
            }
         }
         when [true] {
            lov CodePartValueRef with ReferenceAccountingCodePartValueLovSelector {
               description = CodePartValueRef.Description;
               search = CodePartValue, Description;
               editable = [SpecControlTypeRef = null];
               details = "page/Code${CodePart}/List?contexts=Company:${Company}&filter=Code${CodePart} eq ${CodePartValue}";
            }
         }
      }
   }
}