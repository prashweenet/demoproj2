fragment CodeC;
component ACCRUL;
layer Core;
description "Contains Common Client Code and Projection Logic for Code C";

--------------------------------- FRAGMENTS ---------------------------------


----------------------------- CLIENT FRAGMENTS ------------------------------

--------------------------------- COMMANDS ----------------------------------
command CodeStringCompletionCommand for CodeC {
   label = "Code String Completion";
   mode = SelectedRecords;
   bulkexecute {
      bulknavigate "page/CodeStringCompletion/Form?$contexts=Company:$[Company]&$filter=CodePart eq $[CodePart] and CodePartValue eq $[CodeC]";
   }
}

command TranslationCommand for CodeC {
   label = "Translation";
   mode = SelectedRecords;
   bulkexecute {
      bulknavigate "page/CompanyAttrTransOverview/List?$filter=KeyValue eq $[Company] and Module eq 'ACCRUL' and Lu eq 'CodeC' and AttributeKey eq $[CodeC]";
   }
}

command CopyToCompaniesCommand for CodeC {
   label = "Copy to Companies";
   mode = SelectedRecords;
   enabled = [context.Company.FACodePart != "C" and context.Company.ProjCodePart != "C"];
   bulkexecute {
      assistant CopyToCompaniesAssistant(context.Company, "CodeC", "MANUAL", Selection, "Code_C_API") {
         when OK {
            exit;
         }
      }
   }
}

command AutoCopyToCompaniesCommand for CodeC {
   label = "Copy to Companies";
   mode = SelectedRecords;
   variable CurrentCompanyVar;
   variable SelectionVar;
   variable StateVar;
   bulkexecute {
      if [context.Company.FACodePart != "C" and context.Company.ProjCodePart != "C" and
      CodePartFunction != "InternalElimination" and
      CodePartFunction != "Internal"] {
         set CurrentCompanyVar = "${context.Company}";
         call IsActiveLuExist(CurrentCompanyVar, "CodeC") into StateVar;
         if [StateVar = "TRUE"] {
            if[CreateCount > 0] {
               set SelectionVar = CreateList;
            }
            if[UpdateCount > 0] {
               set SelectionVar = UpdateList;
            }
            if[DeleteCount > 0] {
               set SelectionVar = DeleteList;
            }
            assistant CopyToCompaniesAssistant(CurrentCompanyVar, "CodeC", "AUTOMATIC", SelectionVar, "Code_C_API") {
               when OK {
                  exit;
               }
            }
         }
      }
   }
}


command CodePartAttributeConnectionCommand for CodeC {
   label = "Code Part Attribute Connection";
   mode = SelectedRecords;
   bulkexecute {
      bulknavigate "page/CodePartAttributeConnection/List?$contexts=Company:$[Company]&$filter=CodePart eq $[CodePart] and CodePartValue eq $[CodeC]";
   }
}

@DynamicComponentDependency FIXASS
command ObjectCommand for CodeC {
   label = "Fixed Asset Object";
   enabled = [context.Company.FACodePart = "C"];
   bulkexecute {
      bulknavigate "page/Object/Form?$contexts=Company:$[Company]&$filter=ObjectId eq $[CodeC]";
   }
}

@DynamicComponentDependency GENLED
command ProjectCommand for CodeC {
   label = "Project";
   enabled = [context.Company.ProjCodePart = "C" and BudgetValueDb != true];
   bulkexecute {
      bulknavigate "page/FinancialProject/Form?$contexts=Company:$[Company]&$filter=ProjectId eq $[CodeC]";
   }
}

----------------------------------- LISTS -----------------------------------
list CodeCList for CodeC {
   crudactions {
      after command AutoCopyToCompaniesCommand;
      new {
         enabled = [context.Company.FACodePart != "C" and context.Company.ProjCodePart != "C"];
      }
      edit {
         enabled = [context.Company.FACodePart != "C" and context.Company.ProjCodePart != "C"];
      }
      delete {
         enabled = [context.Company.FACodePart != "C" and context.Company.ProjCodePart != "C"];
      }
   }
   field CodeC {
      size = Small;
   }
   field Description {
      size = Large;
   }
   daterangefield {
      startdate ValidFrom;
      enddate ValidUntil;
      label = "Valid Period";
   }
   field CodeStringCompletionExists {
      size = Small;
   }
   field Text {
      label = "Notes";
      multiline = true;
   }
   field AttributeExists {
      size = Small;
   }
   field BudgetValueDb {
      size = Small;
   }

   commandgroup ObjectProjectCommandGrp {
      @DynamicComponentDependency FIXASS
      command ObjectCommand;
      @DynamicComponentDependency GENLED
      command ProjectCommand;
   }
   commandgroup CommandGroup1CommandGrp {
      command CodeStringCompletionCommand;
      command CodePartAttributeConnectionCommand;
   }
   command TranslationCommand;
   command CopyToCompaniesCommand;
}


--------------------------- PROJECTION FRAGMENTS ----------------------------
@Override
entity CodeC {
   crud = Create, Read, Update, Delete;
   attribute CodeC Text {
      label = "${context.Company.CodeCName}";
      maxlength = 10;
   }
   attribute CodeStringCompletionExists Boolean {
      fetch = "DECODE(ACCOUNTING_CODESTR_COMPL_API.Connect_To_Account(COMPANY,'C',CODE_C),'T','TRUE','FALSE')";
      label = "Code String Completion Exists";
      editable = [false];
   }
   attribute AttributeExists Boolean {
      fetch = "DECODE(ACCOUNTING_ATTRIBUTE_CON_API.Connect_To_Attribute(COMPANY,'C',CODE_C),'T','TRUE','FALSE')";
      label = "Attribute Exists";
      editable = [false];
   }
   attribute BudgetValueDb Boolean("Y", "N") {
      fetch = "BUDGET_VALUE_DB";
      label = "Budget/Planning Only";
      required = [true];
   }
   attribute BudgetValue Enumeration(BudgetAccountFlag) {
      required = [false];
   }
   attribute CodePartFunction Text {
      fetch = "ACCOUNTING_CODE_PARTS_API.Get_Code_Part_Function_Db(company, code_part)";
   }

}