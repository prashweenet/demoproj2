projection AuditInterfaceHandling;
component ACCRUL;
layer Core;
description "Manage Audit Interface";
category Users;
include fragment ScheduledTasksCommon;
include fragment ExtFileTemplateLov2Selector;
include fragment ExtFileTypeUsableSelector;
@DynamicComponentDependency INTLED
include fragment InternalLedgerLovSelector;
@DynamicComponentDependency GENLED
include fragment GeneralLedgerReportAssistant;
@DynamicComponentDependency GENLED
include fragment GeneralLedgerReportWithCounterAccountAssistant;
@DynamicComponentDependency GENLED
include fragment GlBalanceReportSplitByAccountDigitAssistant;
@DynamicComponentDependency FIXASS
include fragment FaYearReportAssistant;
@DynamicComponentDependency INVOIC
include fragment InvoiceCustomerTypeGroupSelector;
@DynamicComponentDependency PAYLED
include fragment CustAgeAnalysisReportDialog;
@DynamicComponentDependency PAYLED
include fragment SuppAgeAnalysisReportDialog;
@DynamicComponentDependency PAYLED
include fragment CustomerLedgerOpenItemsAssistant;
@DynamicComponentDependency PAYLED
include fragment SupplierLedgerOpenItemsAssistant;
@DynamicComponentDependency PAYLED
include fragment TrialBalanceReportAssistant;
-- gelr:localization_control_center, begin
include fragment LocalizationControlCenterHandler;
-- gelr:localization_control_center, end
-- gelr:saft_poland, begin
@DynamicComponentDependency TAXLED
include fragment ProposalLovSelector;
@DynamicComponentDependency MPCCOM
include fragment SiteCompanyLov;
@DynamicComponentDependency INVENT
include fragment WarehouseLov;
@DynamicComponentDependency PAYLED
include fragment CashAccountLovSelector;
@DynamicComponentDependency ORDER
include fragment CustOrdCust6Selector;
-- gelr:saft_poland, end

----------------------------- MAIN ENTRY POINTS -----------------------------
@Override
entityset TaskVirtualSet for TaskVirtual {
   context Company(Company);
}


------------------------------ ENTITY DETAILS -------------------------------

------------------------------- ENUMERATIONS --------------------------------
enumeration RangeTypeEnum {
   value = "Date" {
      label = "Date";
   }
   value = "Period" {
      label = "Period";
   }
}


---------------------------------- QUERIES ----------------------------------
query AuditFormatCountryQuery {
   from = "audit_format_country_lov";
   lu = AuditFormat;
   keys = Company, Country;

   attribute Company Text {
      lovcolumn = [false];
   }
   attribute Country Text {
      lovcolumn = [true];
   }
}

query AuditFormatReportTypeQuery {
   from = "audit_format_report_type_lov";
   lu = AuditFormat;
   keys = Company, Country, ReportType;

   attribute Company Text {
      lovcolumn = [false];
   }
   attribute ReportType Text {
      lovcolumn = [true];
   }
   attribute Country Text {
      lovcolumn = [true];
   }
}


---------------------------------- ACTIONS ----------------------------------

--------------------------------- FUNCTIONS ---------------------------------
function GetParametersExt Structure(ParametersStructure) {
   parameter Company Text;
   parameter Country Text;
   parameter ReportType Text;
}

function GetFileTemplate List<Entity(ExtFileTemplateLov2)> {
   parameter FileType Text;
   where = "file_type = :FileType";
}

function GetTemplateId Text {
   parameter FileType Text;
}

function GetAuditSourceInfo Structure(AuditSourceInfoStructure) {
   parameter Company Text;
   parameter AuditSource Text;
}
function ValidateLedgerId Text {
   parameter Company Text;
   parameter LedgerId Text;
}
-- gelr:saft_poland, begin
@DynamicComponentDependency EREP
function GetReportFormatDbValue Text {
   parameter ReportFormat Enumeration(JpkFileType);
}

@DynamicComponentDependency TAXLED
function GetSpecificProposals List<Entity(ProposalLov)> {
   parameter Company Text;
   parameter SelectionRangeTypeParam Enumeration(RangeTypeEnum);
   parameter FromDate Date;
   parameter ToDate Date;
   parameter FromYear Number;
   parameter ToYear Number;
   parameter FromPeriod Number;
   parameter ToPeriod Number;

   where = "TAX_REPORT_TYPE_DB = 'SUMM_REPORT'
   AND ((:FromDate <= DATE_FROM AND :ToDate <= DATE_UNTIL)
   OR (:SelectionRangeTypeParam = 'Period' AND (Accounting_Period_API.Get_Date_From(:Company,:FromYear,:FromPeriod) <= DATE_FROM
      AND Accounting_Period_API.Get_Date_Until(:Company,:ToYear,:ToPeriod) >= DATE_UNTIL)))";
}
-- gelr:saft_poland, end


-------------------------------- STRUCTURES ---------------------------------
@Override
structure ParametersStructure {
   attribute Company Text;
   attribute Country Text;
   attribute ReportType Text;
   attribute ReportTypeDb Text;
   attribute FileType Text;
   attribute FileTemplateId Text;
   attribute Path Text;
   attribute FromDate Date;
   attribute ToDate Date;
}

structure AuditSourceInfoStructure {
   attribute AuditSource Text;
   attribute SourceType Text;
   attribute InternalLedger Text;
   attribute ReportId Text;
   attribute LedgerId Text;
   attribute DateTitle Text;
   attribute FromDate Date;
   attribute ToDate Date;
}


--------------------------------- VIRTUALS ----------------------------------
@Override
virtual TaskVirtual using BatchSchedule {
   attribute Company Text {
      required = [true];
   }
   attribute Country Text {
      required = [true];
   }
   attribute ReportType Text {
      required = [true];
   }
   attribute ReportTypeDb Text;
   attribute FileType Text;
   attribute FileTemplateId Text;
   attribute Path Text;
   attribute FromDate Date {
      label = "From";
   }
   attribute ToDate Date {
      label = "Until";
   }
   attribute AuditSource Text;
   attribute FromYear Number {
      label = "From";
   }
   attribute FromPeriod Number {
      label = "";
   }
   attribute ToYear Number {
      label = "Until";
   }
   attribute ToPeriod Number {
      label = "";
   }
   attribute LedgerId Text {
      label = "Ledger ID";
   }

   attribute SelectionRangeType Enumeration(RangeTypeEnum) {
      label = "Period/Date Range";
   }
   attribute ReportId Text;
   attribute DateTitle Text;
   attribute SourceType Text;

   attribute IsIntled Text;
   attribute Dummy Text;
   attribute XmlFileName Text {
      label = "Audit File Name";
   }
   attribute TextFileName Text {
      label = "Text File Name";
   }
   attribute XmlMimeType Text {
      fetch = "'application/xslt+xml'";
   }
   attribute TxtMimeType Text {
      fetch = "'text/plain'";
   }
   attribute XmlFileData Stream {
      fileinfo {
         filename XmlFileName;
         mimetype XmlMimeType;
      }
   }
   attribute TextFileData Stream {
      fileinfo {
         filename TextFileName;
         mimetype TxtMimeType;
      }
   }
   -- gelr:saft_poland, begin
   attribute  SaftPolandEnabled Boolean("TRUE", "FALSE");
   @DynamicComponentDependency EREP
   attribute ReportFormat Enumeration(JpkFileType) {
      label = "Audit Type";
   }
   attribute ReportFormatDb Text;
   attribute ProposalId Number;
   @DynamicComponentDependency EREP
   attribute DateType Enumeration(JpkDateType);
   attribute DateTypeClientVal Text;
   attribute Contract Text;
   attribute Site Text;
   attribute WarehouseId Text;
   attribute Currency Text;
   attribute ShortName Text;
   attribute CustomerId Text;
   attribute CustomerGroup Text;
   -- gelr:saft_poland, end

   reference CompanyFinanceRef(Company) to CompanyFinance(Company) {
      label = "Company";
   }
   reference CountryRef(Company, Country) to AuditFormatCountryQuery(Company, Country) {
      label = "Country";
   }
   reference ReportTypeRef(Company, Country, ReportType) to AuditFormatReportTypeQuery(Company, Country, ReportType) {
      label = "Report Type";
   }
   reference AuditSourceRef(AuditSource) to AuditSource(AuditSource) {
      label = "Audit Source";
   }
   @DynamicComponentDependency INTLED
   reference LedgerIdRef(Company, LedgerId) to InternalLedgerLov(Company, LedgerId) {
      label = "Ledger ID";
   }
   reference FileTypeRef(FileType) to ExtFileTypeUsable(FileType) {
      label = "File Type";
   }
   reference FileTemplateRef(FileType, FileTemplateId) to ExtFileTemplateLov2(FileType, FileTemplateId) {
      label = "File Template";
   }

   -- gelr:saft_poland, begin
   @DynamicComponentDependency TAXLED
   reference ProposalIdRef(Company, ProposalId) to ProposalLov(Company, ProposalId) using GetSpecificProposals(FileTemplate, SelectionRangeType, FromDate, ToDate, FromYear, ToYear, FromPeriod, ToPeriod) {
      label = "Tax Proposal ID";
   }
   @DynamicComponentDependency MPCCOM
   reference SiteRef(Company, Site) to SiteCompanyLov(Company, Contract) {
      label = "Site";
   }
   @DynamicComponentDependency INVENT
   reference WarehouseIdRef(Contract, WarehouseId) to WarehouseLov(Contract, WarehouseId) {
      label = "Warehouse";
   }
   reference CurrencyRef(Company, Currency) to CurrencyCode(Company, CurrencyCode) {
      label = "Currency";
   }
   @DynamicComponentDependency PAYLED
   reference ShortNameRef(Company, ShortName) to CashAccountLov(Company, ShortName) {
      label = "Short Name";
   }
   @DynamicComponentDependency ORDER
   reference CustomerIdRef(Company, CustomerId) to CustOrdCust6(Company, CustomerNo) {
      label = "Customer Id";
   }
   @DynamicComponentDependency INVOIC
   reference CustomerGroupRef(Company, CustomerGroup) to InvoiceCustomerTypeGroup(Company, GroupId) {
      label = "Customer Group";
   }
   -- gelr:saft_poland, end
   ---

   action ExecuteTaskExt Text {
      supportwarnings = [true];
      parameter ParameterMsg Text;

   }
}


--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------





