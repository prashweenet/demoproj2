-----------------------------------------------------------------------------
--
--  Logical unit: AvTaskStepMeasurement
--  Component:    ADCOM
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  201002  majslk  LMM2020R1-1298 - Added Get_Measurement_Status
--  200828  TAJALK  LMM2020R1-746 - Added tests
-----------------------------------------------------------------------------

layer Core;


-------------------- LU SPECIFIC PUBLIC METHODS -----------------------------
UNITTEST "Pre_Sync_Action find the correct IFS lu key when MX_UNIQUE_KEY is passed in" FOR
   PROCEDURE Pre_Sync_Action(
      attr_ IN OUT VARCHAR2);
USING
   --Insert your mock directives and mock return variables here
   @MockTable av_exe_task_tab
   VALUES
      | task_id | mx_unique_key | rowversion |
      | 1       | 'TASK1'       | sysdate    |
   END VALUES;

   @MockTable av_exe_task_step_tab
   VALUES
      | task_id | mx_unique_key | task_step_id | step_ord | rowversion |
      | 1       | 'STEP1'       | 1            | 1        | sysdate    |
   END VALUES;

   @MockTable av_exe_task_measurement_tab
   VALUES
      | task_id | mx_unique_key | measurement_id | measurement_type_code | rowversion |
      | 1       | 'MEAS1'       | 1              | 'MT'                  | sysdate    |
   END VALUES;

IS
   --Insert your test variables here
   output1_    VARCHAR2(2000);
   expected1_  VARCHAR2(2000);
BEGIN
   FOR
      | attr_ |
      | 'TASK_UNIQUE_KEY'||chr(31)||'TASK1'||chr(30)||'MEASUREMENT_TYPE_CODE'||chr(31)||'MT'||chr(30)||'WITH_BOTH_KEYS'|
      |'NO_KEYS'|
      LOOP
      --Insert your test code here
      output1_ := attr_;
      Pre_Sync_Action(output1_);

      expected1_ := 'WITH_BOTH_KEYS'||'TASK_STEP_ID'||chr(31)||'1'||chr(30)||'MEASUREMENT_ID'||chr(31)||'1'||chr(30);
      --Insert your assertions here
      IF attr_ LIKE '%WITH_BOTH_KEYS%' THEN
         ASSERT output1_ = expected1_ MESSAGE 'Expected '||expected1_||' but  was '||output1_;
      ELSE
         ASSERT output1_ = attr_ MESSAGE 'Expected '||attr_||' but  was '||output1_;
      END IF;
   END LOOP;
END UNITTEST;



UNITTEST "Get_Measurement_Status should return pending measurement count status" FOR
   FUNCTION Get_Measurement_Status(
      task_step_id_ IN     NUMBER) RETURN NUMBER;
USING
   --Insert your mock directives and mock return variables here
   @MockTable av_exe_task_measurement_tab
   VALUES
      | measured_user | measurement_id |
      | 'IFSAPP'      | 1              |
      | ''            | 2              |
      | 'IFSAPP'      | 3              |
   END VALUES;

   @MockTable av_task_step_measurement
   VALUES
      | measurement_id | task_step_id |
      | 1              | 1            |
      | 1              | 2            |
      | 2              | 3            |
      | 3              | 4            |
      | 2              | 4            |
   END VALUES;

IS
   --Insert your test variables here
   return_   NUMBER;
   expected_ NUMBER;
BEGIN
   FOR
      | expected_ | task_step_id_ |
      | 1         |  1            |
      | 1         |  2            |
      | 0         |  3            |
      | 1         |  4            |
   LOOP
      --Insert your test code here
      return_ := Get_Measurement_Status(task_step_id_);
      --Insert your assertions here
      ASSERT return_ = expected_ MESSAGE 'Expected '||expected_||' but returned '||return_;
   END LOOP;
END UNITTEST;


