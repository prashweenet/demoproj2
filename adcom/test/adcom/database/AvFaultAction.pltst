-----------------------------------------------------------------------------
--
--  Logical unit: AvFaultAction
--  Component:    ADCOM
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  201202  aruflk  LMM2020R1-1453, Added unit test for Check_Insert___().
--  200921  KAWJLK  LMM2020R1-711 Added tests for Get_Fault_Action_Count
--  200916  Tajalk  LMM2020R1-761- Added tests for sync logic
--  200707  SatGlk  Implemented unit test for Get_Latest_Correct_Fault_Act
--  200701  majslk  Created
-----------------------------------------------------------------------------

layer Core;


-------------------- LU SPECIFIC PUBLIC METHODS -----------------------------
UNITTEST "Get_Last_Action_Id should should always return the id of the last corrective action of a fault" FOR
   FUNCTION Get_Last_Action_Id (
      fault_id_ IN     NUMBER) RETURN VARCHAR2;
USING
   --Insert your mock directives and mock return variables here
   @MockTable av_fault_action_tab
   VALUES
      | fault_action_id | action_date | fault_id | is_corrective |
      | 1               | TO_DATE('2020-06-21 05:00:00', 'yyyy-mm-dd HH:MI:SS')     | 1        | Fnd_Boolean_API.DB_TRUE          |
      | 2               | TO_DATE('2020-06-21 08:00:00', 'yyyy-mm-dd HH:MI:SS')     | 1        | Fnd_Boolean_API.DB_TRUE          |
      | 3               | TO_DATE('2020-06-21 08:00:00', 'yyyy-mm-dd HH:MI:SS')     | 2        | Fnd_Boolean_API.DB_TRUE          |
      | 4               | TO_DATE('2020-06-20 08:00:00', 'yyyy-mm-dd HH:MI:SS')     | 2        | Fnd_Boolean_API.DB_FALSE         |

   END VALUES;

IS
   --Insert your test variables here
   return_   VARCHAR2(2000);
   expected_ VARCHAR2(2000);
BEGIN
   FOR
      | expected_ | fault_id_ |
      | 2         | 1         |
   LOOP
      --Insert your test code here
      return_ := Get_Last_Action_Id(fault_id_);
      --Insert your assertions here
      ASSERT return_ = expected_ MESSAGE 'Expected '||expected_||' but returned '||return_;
   END LOOP;
END UNITTEST;

UNITTEST "Get_Latest_Correct_Fault_Act should always return the last corrective action" FOR
   FUNCTION Get_Latest_Correct_Fault_Act (
      fault_id_ IN     NUMBER) RETURN VARCHAR2;
USING
   --Insert your mock directives and mock return variables here
   @MockTable av_fault_action_tab
   VALUES
      | action_desc | action_date | fault_id | is_corrective |
      | 'Action 1'  | TO_DATE('2020-06-21 06:00:00', 'yyyy-mm-dd HH:MI:SS')     | 1        | Fnd_Boolean_API.DB_TRUE          |
      | 'Action 2'  | TO_DATE('2020-06-22 05:00:00', 'yyyy-mm-dd HH:MI:SS')     | 1        | Fnd_Boolean_API.DB_TRUE          |
      | 'Action 3'  | TO_DATE('2020-06-23 05:00:00', 'yyyy-mm-dd HH:MI:SS')     | 1        | Fnd_Boolean_API.DB_FALSE         |
   END VALUES;

IS
   --Insert your test variables here
   return_   VARCHAR2(2000);
   expected_ VARCHAR2(2000);
BEGIN
   FOR
      | expected_ | fault_id_ |
      | 'Action 2'|  1        |
   LOOP
      --Insert your test code here
      return_ := Get_Latest_Correct_Fault_Act(fault_id_);
      --Insert your assertions here
      ASSERT return_ = expected_ MESSAGE 'Expected '||expected_||' but returned '||return_;
   END LOOP;
END UNITTEST;

UNITTEST "Pre_Sync_Action should find the correct IFS lu key when MX_UNIQUE_KEY is passed in" FOR
   PROCEDURE Pre_Sync_Action(
      attr_ IN OUT VARCHAR2);
USING
   --Insert your mock directives and mock return variables here
   @MockTable av_fault_tab
   VALUES
      | fault_id | mx_unique_key |
      | 1        | 'FAULT1'      |
   END VALUES;

IS
   --Insert your test variables here
   output1_  VARCHAR2(2000);
   expected1_  VARCHAR2(2000);
BEGIN
   FOR
      | attr_ |
      | 'FAULT_UNIQUE_KEY'||chr(31)||'FAULT1'||chr(30)||'WITH_FAULT_KEY'|
      | 'ACTION_DESC'||chr(31)||'FAULT ACTION 1'||chr(30)||'WITH_NO_KEY'|
   LOOP
      --Insert your test code here
      output1_ := attr_;
      Pre_Sync_Action(output1_);

      expected1_ := 'WITH_FAULT_KEY'||'FAULT_ID'||chr(31)||'1'||chr(30);
      --Insert your assertions here
      IF attr_ LIKE '%WITH_FAULT_KEY%' THEN
         ASSERT output1_ = expected1_ MESSAGE 'Expected '||expected1_||' but  was '||output1_;
      ELSE
         ASSERT output1_ = attr_ MESSAGE 'Expected '||attr_||' but  was '||output1_;
      END IF;
   END LOOP;
END UNITTEST;

UNITTEST "Get_Fault_Action_Count should return fault action count  when fault_id is passed in" FOR
   FUNCTION Get_Fault_Action_Count(
      fault_id_ IN     NUMBER) RETURN NUMBER;
USING
   --Insert your mock directives and mock return variables here
   @MockTable av_fault_action_tab
   VALUES
      | fault_id |
      | 0        |
      | 0        |
      | 1        |
      | 1        |
      | 1        |
      | 2        |
      | 3        |
      | 4        |
      | 4        |
      | 4        |
   END VALUES;

IS
   --Insert your test variables here
   return_   NUMBER;
   expected_ NUMBER;
BEGIN
   FOR
      | expected_ | fault_id_ |
      | 2         |  0        |
      | 3         |  1        |
      | 1         |  2        |
      | 1         |  3        |
      | 3         |  4        |
      | 0         |  6        |
   LOOP
      --Insert your test code here
      return_ := Get_Fault_Action_Count(fault_id_);
      --Insert your assertions here
      ASSERT return_ = expected_ MESSAGE 'Expected '||expected_||' but returned '||return_;
   END LOOP;
END UNITTEST;

UNITTEST "Check_Insert___ should ... when ..." FOR
   PROCEDURE Check_Insert___ (
      newrec_ IN OUT av_fault_action_tab%ROWTYPE,
      indrec_ IN OUT Indicator_Rec,
      attr_   IN OUT VARCHAR2 );
USING
   @MockPackage Av_Exe_Task_Action_API
   FUNCTION Get_Next_Seq  RETURN  NUMBER
   IS
   BEGIN
      RETURN av_exe_task_action_seq.NEXTVAL;
   END Get_Next_Seq;

IS
   test_rec1_  av_fault_action_tab%ROWTYPE;
   test_rec2_  av_fault_action_tab%ROWTYPE;
   output_  Indicator_Rec;
BEGIN
   FOR
      | newrec_    | indrec_ | attr_ |
      | test_rec1_ | output_ |  'A'  |
      | test_rec2_ | output_ |  'A'  |
   LOOP
      IF newrec_.fault_action_id IS NULL THEN
         newrec_.fault_action_id := Get_Next_Seq();
         ASSERT newrec_.fault_action_id IS NOT NULL MESSAGE 'Returned '||newrec_.fault_action_id;
      END IF;
   END LOOP;
END UNITTEST;








