-----------------------------------------------------------------------------
--
--  Logical unit: AvFaultDeferralRequest
--  Component:    ADCOM
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  201106  KAWJLK  LMM2020R1-1799, Modified Pre_Sync_Action
--  201203  aruflk  LMM2020R1-1459, Added unit test for Sync_State_Handle___().
--  201106  KAWJLK  LMM2020R1-1378, Added unit test for Check_Insert___
--  201020  SWiclk  AD2020R1-819, Added unit test for Post_Sync_Action()
--  201020          and cannot handle Set_Mx_Unique_Key___() due to UML.
--  200916  SWICLK  LMM2020R1-721, Added unit test for Pre_Sync_Action().
--  200904  KAWJLK  Created. LMM2020R1-1038, Added unit test for Get_Active_Deferral_Request().
-----------------------------------------------------------------------------

layer Core;


-------------------- LU SPECIFIC IMPLEMENTATION METHODS ---------------------


-------------------- LU SPECIFIC PUBLIC METHODS -----------------------------

UNITTEST "Get_Active_Deferral_Request should return Active deferral_request_id when fault_id is given" FOR
   FUNCTION Get_Active_Deferral_Request(
      fault_id_ IN     NUMBER ) RETURN NUMBER;
USING
   --Insert your mock directives and mock return variables here
   @MockTable av_fault_deferral_request_tab
   VALUES
      | deferral_request_id | requested_date | fault_id |
      | 0                   | TO_DATE('2020-09-04 05:00:00', 'yyyy-mm-dd HH:MI:SS')         | 1        |
      | 1                   | TO_DATE('2020-09-05 05:00:00', 'yyyy-mm-dd HH:MI:SS')         | 2        |
      | 2                   | TO_DATE('2020-09-06 05:00:00', 'yyyy-mm-dd HH:MI:SS')         | 3        |
      | 3                   | TO_DATE('2020-09-08 05:00:00', 'yyyy-mm-dd HH:MI:SS')         | 2        |
      | 4                   | TO_DATE('2020-09-09 05:00:00', 'yyyy-mm-dd HH:MI:SS')         | 1        |
      | 5                   | TO_DATE('2020-09-10 05:00:00', 'yyyy-mm-dd HH:MI:SS')         | 4        |
      | 6                   | TO_DATE('2020-09-11 05:00:00', 'yyyy-mm-dd HH:MI:SS')         | 5        |
      | 7                   | TO_DATE('2020-09-11 05:30:00', 'yyyy-mm-dd HH:MI:SS')         | 1        |
   END VALUES;

IS
   --Insert your test variables here
   return_   NUMBER;
   expected_ NUMBER;
BEGIN
   FOR
      | expected_ | fault_id_ |
      | 7         |  1        |
      | 3         |  2        |
      | 5         |  4        |
      | 6         |  5        |
      | 2         |  3        |
   LOOP
      --Insert your test code here
      return_ := Get_Active_Deferral_Request(fault_id_);
      --Insert your assertions here
      ASSERT return_ = expected_ MESSAGE 'Expected '||expected_||' but returned '||return_;
   END LOOP;
END UNITTEST;

UNITTEST "Pre_Sync_Action should return correct attr depending on existance of the Deferral_Reference_ID and Fault_ID" FOR
   PROCEDURE Pre_Sync_Action(
      attr_ IN OUT VARCHAR2);
USING
   --Insert your mock directives and mock return variables here
   @MockTable av_deferral_reference_tab
   VALUES
      | deferral_reference_id | mx_unique_key |
      | 1                     | '4650:10000'  |
   END VALUES;

   @MockTable av_fault_tab
   VALUES
      | fault_id  | mx_unique_key |
      | 1         | '4646:20000'  |
   END VALUES;

IS
   --Insert your test variables here
   output1_    VARCHAR2(2000);
   expected1_  VARCHAR2(2000);
   expected2_  VARCHAR2(2000);
   expected3_  VARCHAR2(2000);
BEGIN
   FOR
      | attr_ |
      | 'DEFERRAL_REF_TAG'||chr(31)||'TAG'||chr(30)||'DEFERRAL_REF_UNIQUE_KEY'||chr(31)||'4650:10000'||chr(30) |
      | 'FAULT_TAG'||chr(31)||'TAG'||chr(30)||'FAULT_UNIQUE_KEY'||chr(31)||'4646:20000'||chr(30) |
      | 'BOTH_TAG'||chr(31)||'TAG'||chr(30)||'FAULT_UNIQUE_KEY'||chr(31)||'4646:20000'||chr(30)||'DEFERRAL_REF_UNIQUE_KEY'||chr(31)||'4650:10000'||chr(30) |
      | 'NO_TAG'||chr(31)||'TAG'||chr(30)||'NOTE'||chr(31)||'Sample note'||chr(30) |
      -- TODO: below commented samples trigger Error_Sys which is intented check but due to error get raised test fails.
      --| 'DEFERRAL_REF_TAG'||chr(31)||'TAG'||chr(30)||'DEFERRAL_REF_UNIQUE_KEY'||chr(31)||'4650:10001'||chr(30) |
      --| 'FAULT_TAG'||chr(31)||'TAG'||chr(30)||'FAULT_UNIQUE_KEY'||chr(31)||'4646:20001'||chr(30) |
   LOOP
      --Insert your test code here
      output1_ := attr_;
      Pre_Sync_Action(output1_);
      --Insert your assertions here
      expected1_ := 'DEFERRAL_REF_TAG'||chr(31)||'TAG'||chr(30)||'DEFERRAL_REFERENCE_ID'||chr(31)||'1'||chr(30);
      expected2_ := 'FAULT_TAG'||chr(31)||'TAG'||chr(30)||'NATURAL_KEY'||chr(31)||'4646:20000'||chr(30)||'FAULT_ID'||chr(31)||'1'||chr(30);
      expected3_ := 'BOTH_TAG'||chr(31)||'TAG'||chr(30)||'DEFERRAL_REFERENCE_ID'||chr(31)||'1'||chr(30)||'NATURAL_KEY'||chr(31)||'4646:20000'||chr(30)||'FAULT_ID'||chr(31)||'1'||chr(30);

      -- When DEFERRAL_REFERENCE_ID does exist
      IF (output1_ LIKE 'DEFERRAL_REF_TAG%') THEN
         ASSERT output1_ = expected1_ MESSAGE ' Assert1: Expected '||expected1_  ||' but  was '||output1_;
         -- When FAULT_ID does exist
      ELSIF (output1_ LIKE 'FAULT_TAG%') THEN
         ASSERT output1_ = expected2_ MESSAGE 'Assert2: Expected '||expected2_||' but  was '||output1_;
      ELSIF (output1_ LIKE 'BOTH_TAG%') THEN
         ASSERT output1_ = expected3_ MESSAGE 'Assert3: Expected '||expected3_||' but  was '||output1_;
      ELSE
         ASSERT output1_ = attr_ MESSAGE 'Assert4: Expected '||attr_||' but  was '||output1_;
      END IF;
   END LOOP;
END UNITTEST;

UNITTEST "Post_Sync_Action should correct the incoming state based on the current state" FOR
   PROCEDURE Post_Sync_Action(
      objid_      IN     VARCHAR2,
      objversion_ IN     VARCHAR2,
      attr_       IN     VARCHAR2);
USING
   --Insert your mock directives and mock return variables here
   @MockPackage  Av_Fault_Deferral_Request_API
   FUNCTION Get_Object_By_Id___ (
      objid_ IN     VARCHAR2 ) RETURN av_fault_deferral_request_tab%ROWTYPE
   IS
      fault_def_request_rec_  av_fault_deferral_request_tab%ROWTYPE;
   BEGIN
      CASE objid_
      WHEN 'NOTAPP1' THEN
         fault_def_request_rec_.deferral_request_id := 1;
         RETURN fault_def_request_rec_;
      WHEN 'NOTAPP2' THEN
         fault_def_request_rec_.deferral_request_id := 2;
         RETURN fault_def_request_rec_;
      WHEN 'NOTAPP3' THEN
         fault_def_request_rec_.deferral_request_id := 3;
         RETURN fault_def_request_rec_;
      WHEN 'NOTAPP4' THEN
         fault_def_request_rec_.deferral_request_id := 4;
         RETURN fault_def_request_rec_;
      WHEN 'NOTAPP5' THEN
         fault_def_request_rec_.deferral_request_id := 5;
         RETURN fault_def_request_rec_;
      WHEN 'NOTAPP6' THEN
         fault_def_request_rec_.deferral_request_id := 6;
         RETURN fault_def_request_rec_;
      WHEN 'NOTAPP7' THEN
         fault_def_request_rec_.deferral_request_id := 7;
         RETURN fault_def_request_rec_;
      WHEN 'NOTAPP8' THEN
         fault_def_request_rec_.deferral_request_id := 8;
         RETURN fault_def_request_rec_;
      WHEN 'NOTAPP9' THEN
         fault_def_request_rec_.deferral_request_id := 9;
         RETURN fault_def_request_rec_;
      END CASE ;

      RETURN NULL;
END Get_Object_By_Id___;

@MockPackage  Av_Fault_Deferral_Request_API
FUNCTION Get_Objstate (
   deferral_request_id_ IN     NUMBER ) RETURN VARCHAR2
IS
BEGIN
   CASE deferral_request_id_
   WHEN 1 THEN
      RETURN 'Requested';
   WHEN 2 THEN
      RETURN 'Requested';
   WHEN 3 THEN
      RETURN 'Requested';
   WHEN 4 THEN
      RETURN 'Approved';
   WHEN 5 THEN
      RETURN 'Approved';
   WHEN 6 THEN
      RETURN 'Approved';
   WHEN 7 THEN
      RETURN 'Rejected';
   WHEN 8 THEN
      RETURN 'Rejected';
   WHEN 9 THEN
      RETURN 'Rejected';
   END CASE ;

   RETURN NULL;
END Get_Objstate;

@MockPackage Av_Fault_Deferral_Request_API
PROCEDURE Sync_State_Handle___(
   current_rowstate_  IN     VARCHAR2,
   incoming_rowstate_ IN     VARCHAR2,
   input_objid_       IN     VARCHAR2,
   input_objversion_  IN     VARCHAR2)
IS
BEGIN
   ASSERT  current_rowstate_ IN  ('Requested', 'Approved', 'Rejected')     MESSAGE 'Expected '||'Requested, Approved, Rejected'||' but  was '||current_rowstate_;
   ASSERT  incoming_rowstate_ IN  ('PENDING', 'APPROVED', 'REJECTED', 'CANCELLED')     MESSAGE 'Expected '||'PENDING, APPROVED, REJECTED, CANCELLED'||' but  was '||incoming_rowstate_;
END Sync_State_Handle___;
IS
--Insert your test variables here
BEGIN
FOR
   | objid_      | objversion_ | attr_                                   |
   | 'NOTAPP1'   |  'A'        | 'ROWSTATE'||chr(31)||'PENDING'||chr(30) |
   | 'NOTAPP2'   |  'A'        | 'ROWSTATE'||chr(31)||'REJECTED'||chr(30)|
   | 'NOTAPP3'   |  'A'        | 'ROWSTATE'||chr(31)||'CANCELLED'||chr(30)|
   | 'NOTAPP4'   |  'A'        | 'ROWSTATE'||chr(31)||'APPROVED'||chr(30)|
   | 'NOTAPP5'   |  'A'        | 'ROWSTATE'||chr(31)||'PENDING'||chr(30) |
   | 'NOTAPP6'   |  'A'        | 'ROWSTATE'||chr(31)||'REJECTED'||chr(30)|
   | 'NOTAPP7'   |  'A'        | 'ROWSTATE'||chr(31)||'CANCELLED'||chr(30)|
   | 'NOTAPP8'   |  'A'        | 'ROWSTATE'||chr(31)||'APPROVED'||chr(30)|
   | 'NOTAPP9'   |  'A'        | 'ROWSTATE'||chr(31)||'REJECTED'||chr(30)|

LOOP
   --Insert your test code here
   Post_Sync_Action(objid_, objversion_, attr_);
   --Insert your assertions here
END LOOP;
END UNITTEST;



UNITTEST "Check_Insert___ should genarete next sequence value when insert new value for av_fault_deferral_request_tab" FOR
   PROCEDURE Check_Insert___ (
      newrec_ IN OUT av_fault_deferral_request_tab%ROWTYPE,
      indrec_ IN OUT Indicator_Rec,
      attr_   IN OUT VARCHAR2 );
USING
   --Insert your mock directives and mock return variables here
   @MockTable dual
   VALUES
      |dummy |
      |1     |
   END VALUES;
IS
   --Insert your test variables here
   output1_  av_fault_deferral_request_tab%ROWTYPE;
   output4_  av_fault_deferral_request_tab%ROWTYPE;
   output2_  Indicator_Rec;
   --   output3_  VARCHAR2(2000);
BEGIN
   output1_.deferral_request_id := NULL;
   output4_.deferral_request_id := 5000;
   FOR
      | newrec_ | indrec_ | attr_ |
      | output1_| output2_| 'A'   |
      | output4_| output2_| 'A'   |
   LOOP
      --Insert your test code here
      IF newrec_.deferral_request_id IS NULL THEN
         newrec_.deferral_request_id := DEFERRAL_REQ_ID_SEQ.NEXTVAL;
         --Insert your assertions here
         ASSERT newrec_.deferral_request_id IS NOT NULL MESSAGE 'Returned '||newrec_.deferral_request_id;
      END IF;
   END LOOP;
END UNITTEST;

UNITTEST "Sync_State_Handle___ should should correct the incoming state based on the current state" FOR
   PROCEDURE Sync_State_Handle___(
      current_rowstate_  IN     VARCHAR2,
      incoming_rowstate_ IN     VARCHAR2,
      input_objid_       IN     VARCHAR2,
      input_objversion_  IN     VARCHAR2);
USING
   @MockPackage  Av_Fault_Deferral_Request_API
   PROCEDURE Approve__ (
      info_          OUT VARCHAR2,
      objid_      IN     VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2,
      attr_       IN OUT NOCOPY VARCHAR2,
      action_     IN     VARCHAR2 )
   IS
   BEGIN
      ASSERT objid_ IN ('APPROVED1') MESSAGE 'Expected '||'APPROVED1'||' but  was '||objid_;
   END Approve__;

   @MockPackage  Av_Fault_Deferral_Request_API
   PROCEDURE Reject__ (
      info_          OUT VARCHAR2,
      objid_      IN     VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2,
      attr_       IN OUT NOCOPY VARCHAR2,
      action_     IN     VARCHAR2 )
   IS
   BEGIN
      ASSERT objid_ IN ('REJECTED1', 'CANCELLED1') MESSAGE 'Expected '||'REJECTED1, CANCELLED1'||' but  was '||objid_;
   END Reject__;
IS

BEGIN
   FOR
      | current_rowstate_ | incoming_rowstate_ | input_objid_ | input_objversion_ |
      | 'Requested'       |  'PENDING'         |  'NOTAPP1'   |  'A'              |
      | 'Rejected'        |  'CANCELLED'       |  'NOTAPP2'   |  'A'              |
      | 'Requested'       |  'APPROVED'        |  'APPROVED1' |  'A'              |
      | 'Requested'       |  'REJECTED'        |  'REJECTED1' |  'A'              |
      | 'Requested'       |  'CANCELLED'       |  'CANCELLED1'|  'A'              |
      | 'Requested'       |  'PENDING'         |  'NOTAPP1'   |  'A'              |
   LOOP
      Sync_State_Handle___(current_rowstate_, incoming_rowstate_, input_objid_, input_objversion_);
   END LOOP;
END UNITTEST;


