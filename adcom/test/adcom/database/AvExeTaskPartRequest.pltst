-----------------------------------------------------------------------------
--
--  Logical unit: AvExeTaskPartRequest
--  Component:    ADCOM
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  210111  majslk  LMM2020R1-1478, Updated check_insert__ pltst.
--  201203  majslk  LMM2020R1-1455- Added unit tests for Check_Insert__ and Get_Next_Seq.
--  200918  Satglk  LMM2020R1-811, Added unit test for Pre_Sync_Action.
--  200728  LAHNLK  added Get_Task_Part_Request_Count pltst
--  200701  sevhlk  Created.
-----------------------------------------------------------------------------

layer Core;


-------------------- LU SPECIFIC IMPLEMENTATION METHODS ---------------------


-------------------- LU SPECIFIC PUBLIC METHODS -----------------------------
UNITTEST "Get_Material_Availability should return the proper material availability to related task" FOR
   FUNCTION Get_Material_Availability(
      task_id_ IN     NUMBER) RETURN VARCHAR2;
USING
   --Insert your mock directives and mock return variables here
   @MockTable av_exe_task_part_request_tab
   VALUES
      | availability_status | task_id |
      | 'Available'         | 1       |
      | 'Issued'            | 2       |
   END VALUES;

IS
   --Insert your test variables here
   return_   VARCHAR2(2000);
   expected_ VARCHAR2(2000);
BEGIN
   FOR
      | expected_ | task_id_ |
      | 'Avail'   |  1       |
      | 'Issued'  |  2       |
   LOOP
      --Insert your test code here
      return_ := Get_Material_Availability(task_id_);
      --Insert your assertions here
      ASSERT return_ = expected_ MESSAGE 'Expected '||expected_||' but returned '||return_;
   END LOOP;
END UNITTEST;


UNITTEST "Get_Task_Part_Request_Count should return the proper part request count by omiting CANCELED ones related to a task" FOR
   FUNCTION Get_Task_Part_Request_Count(
      task_id_ IN     NUMBER) RETURN NUMBER;
USING
   --Insert your mock directives and mock return variables here
   @MockTable av_exe_task_part_request_tab
   VALUES
      | task_id | availability_status |
      | 1       | 'ISSUED'            |
      | 1       | 'CANCELED'          |
      | 1       | 'OPEN'              |
      | 1       | 'AVAILABLE'         |
      | 1       | 'ISSUED'            |
      | 2       | 'ISSUED'            |
      | 3       | 'CANCELED'          |
   END VALUES;

IS
   --Insert your test variables here
   return_   NUMBER;
   expected_ NUMBER;
BEGIN
   FOR
      | expected_ | task_id_ |
      | 4         |  1       |
      | 1         |  2       |
      | 0         |  3       |
   LOOP
      --Insert your test code here
      return_ := Get_Task_Part_Request_Count(task_id_);
      --Insert your assertions here
      ASSERT return_ = expected_ MESSAGE 'Expected '||expected_||' but returned '||return_;
   END LOOP;
END UNITTEST;

UNITTEST "Pre_Sync_Action should should find the correct IFS lu key when MX_UNIQUE_KEY is passed in" FOR
   PROCEDURE Pre_Sync_Action(
      attr_ IN OUT VARCHAR2);
USING
   --Insert your mock directives and mock return variables here
   @MockTable av_exe_task_tab
   VALUES
      | task_id | mx_unique_key |
      | 4       | 'MXTASKKEY1'  |
   END VALUES;

   @MockTable av_part_number_tab
   VALUES
      | mx_unique_key     | part_number_id |
      | 'MXPARTNUMBERKEY2'| 2              |
   END VALUES;

   @MockTable av_part_group_tab
   VALUES
      | mx_unique_key       | part_group_id |
      | 'MXPARTGROUPKEY3'   | 8             |
   END VALUES;
IS
   --Insert your test variables here
   output1_     VARCHAR2(2000);
   expected1_   VARCHAR2(2000);
   expected2_   VARCHAR2(2000);
   expected3_   VARCHAR2(2000);
   expected4_   VARCHAR2(2000);
BEGIN
   FOR
      | attr_ |
      | 'TASK_UNIQUE_KEY'||chr(31)||'MXTASKKEY1'||chr(30)||'WITH_TASK_UNIQUE_KEY'|
      | 'PART_NUMBER_UNIQUE_KEY'||chr(31)||'MXPARTNUMBERKEY2'||chr(30)||'WITH_PART_NUMBER_UNIQUE_KEY'|
      | 'PART_GROUP_UNIQUE_KEY'||chr(31)||'MXPARTGROUPKEY3'||chr(30)||'WITH_PART_GROUP_UNIQUE_KEY'|
      | 'ALT_ID'||chr(31)||'71D12BE042604195938B84E5A2B2267B'||chr(30)||'WITH_ALT_ID'|
   LOOP
      expected1_ := 'WITH_TASK_UNIQUE_KEY'||'TASK_ID'||chr(31)||'4'||chr(30);
      expected2_ := 'WITH_PART_NUMBER_UNIQUE_KEY'||'PART_NUMBER_ID'||chr(31)||'2'||chr(30);
      expected3_ := 'WITH_PART_GROUP_UNIQUE_KEY'||'PART_GROUP_ID'||chr(31)||'8'||chr(30);
      expected4_ := 'ALT_ID'||chr(31)||'71D12BE042604195938B84E5A2B2267B'||chr(30)||'WITH_ALT_ID'||'NATURAL_KEY'||chr(31)||'71D12BE042604195938B84E5A2B2267B'||chr(30);

      --Insert your test code here
      output1_ := attr_;
      Pre_Sync_Action(output1_);
      --Insert your assertions here
      IF attr_ LIKE '%WITH_TASK_UNIQUE_KEY%' THEN
         ASSERT output1_ = expected1_ MESSAGE 'Expected '||expected1_||' but  was '||output1_;
      ELSIF attr_ LIKE '%WITH_PART_NUMBER_UNIQUE_KEY%' THEN
         ASSERT output1_ = expected2_ MESSAGE 'Expected '||expected2_||' but  was '||output1_;
      ELSIF attr_ LIKE '%WITH_PART_GROUP_UNIQUE_KEY%' THEN
         ASSERT output1_ = expected3_ MESSAGE 'Expected '||expected3_||' but  was '||output1_;
      ELSIF attr_ LIKE '%WITH_ALT_ID%' THEN
         ASSERT output1_ = expected4_ MESSAGE 'Expected '||expected4_||' but  was '||output1_;
      ELSE
         ASSERT output1_ = attr_ MESSAGE 'Expected '||attr_||' but  was '||output1_;
      END IF;
   END LOOP;
END UNITTEST;


UNITTEST "PublishRequestPartError___ should return Error when No task is found for the task ID" FOR
FUNCTION PublishRequestPartError___ (
   payload_              IN     VARCHAR2,
   task_part_request_id_ IN     NUMBER ) RETURN VARCHAR2;
USING
IS
   return_     VARCHAR2(2000);
   expected_   VARCHAR2(2000);
   input_      VARCHAR2(2000);
BEGIN
   input_ := '{"status":400,"detail":null,"message":"No task is found for the task ID : C162BAD714274BAF8CCEF21DB19A27A7","errorCode":"UNKNOWN"}';
   expected_ := 'MXREQPARTERR: Maintenix request part validation failed with error - No task is found for the task ID : C162BAD714274BAF8CCEF21DB19A27A7';
   return_ := PublishRequestPartError___(input_,task_part_request_id_ );

   ASSERT return_ = expected_ MESSAGE 'Expected '||expected_||' but returned '||return_;
   
END UNITTEST;


UNITTEST "Check_Insert___ should assign generated sequence value for Task part request id when inserting new record" FOR
   PROCEDURE Check_Insert___ (
      newrec_ IN OUT av_exe_task_part_request_tab%ROWTYPE,
      indrec_ IN OUT Indicator_Rec,
      attr_   IN OUT VARCHAR2 );
USING
   --Insert your mock directives and mock return variables here
   @MockPackage Av_Exe_Task_Part_Request_API
   FUNCTION Get_Next_Seq  RETURN  NUMBER
   IS
   BEGIN
      RETURN AV_EXE_TASK_PART_REQUEST_SEQ.NEXTVAL;
   END Get_Next_Seq;

   @MockPackage Av_Fault_Part_Request_API
   FUNCTION Get_Fault_Part_Request(mx_unique_key_ IN     VARCHAR2) RETURN VARCHAR2
   IS
   BEGIN
      RETURN CASE mx_unique_key_
      WHEN '1456:16203' THEN 1
      WHEN NULL         THEN NULL
      WHEN '1456:16206' THEN 2
   END;
END Get_Fault_Part_Request;

@MockTable av_fault_part_request_tab
VALUES
   | mx_unique_key | fault_part_request_id |
   | '1456:16204'  | 1                     |
   | '1456:16203'  | 1                     |
   | NULL          | 2                     |
   | NULL          | 3                     |
END VALUES;

IS
test_rec1_             av_exe_task_part_request_tab%ROWTYPE;
test_rec2_             av_exe_task_part_request_tab%ROWTYPE;
test_rec3_             av_exe_task_part_request_tab%ROWTYPE;
output_                Indicator_Rec;
fault_part_request_id_ NUMBER;

BEGIN
test_rec1_.task_part_request_id := NULL;
test_rec1_.task_id              := 1;
test_rec1_.part_number_id       := 100;
test_rec1_.required_quantity    := 50;
test_rec1_.part_group_id        := 20;
test_rec1_.mx_unique_key        := '1456:16203';

test_rec2_.task_part_request_id := 4456;
test_rec2_.mx_unique_key        := '1456:16209';

test_rec3_.task_part_request_id := NULL;
test_rec3_.mx_unique_key        := NULL;

FOR
   | newrec_    | indrec_ | attr_ |
   | test_rec1_ | output_ | 'A'   |
   | test_rec2_ | output_ | 'A'   |
   | test_rec3_ | output_ | 'A'   |
LOOP
   IF newrec_.task_part_request_id IS NULL THEN
      fault_part_request_id_:= Get_Fault_Part_Request(newrec_.Mx_Unique_Key);
      IF fault_part_request_id_ IS NULL THEN
         newrec_.task_part_request_id := Get_Next_Seq();
      ELSE
         newrec_.task_part_request_id := fault_part_request_id_;
      END IF;
      ASSERT newrec_.task_part_request_id IS NOT NULL MESSAGE 'Returned '||newrec_.task_part_request_id;
   END IF;
END LOOP;
END UNITTEST;


UNITTEST "Get_Next_Seq should return next value of the sequence" FOR
   FUNCTION Get_Next_Seq RETURN NUMBER;
USING
   --Insert your mock directives and mock return variables here
   @MockTable dual
   VALUES
      | dummy |
      | 1     |
   END VALUES;

IS
   return1_   NUMBER;
   return2_   NUMBER;
   output_    NUMBER;
   expected_  NUMBER;
BEGIN
   FOR
      | expected_ |
      | 1         |
   LOOP
      --Insert your test code here
      return1_ := Get_Next_Seq;
      return2_ := Get_Next_Seq;

      output_  := return2_ - return1_;
      --Insert your assertions here
      ASSERT output_ = expected_ MESSAGE 'Expected '||expected_||' but returned '||output_;
   END LOOP;
END UNITTEST;