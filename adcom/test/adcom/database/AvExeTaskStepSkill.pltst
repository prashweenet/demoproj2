-----------------------------------------------------------------------------
--
--  Logical unit: AvExeTaskStepSkill
--  Component:    ADCOM
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  200827  TAJALK  LMM2020R1-469 - Sync Logic tests added
-----------------------------------------------------------------------------

layer Core;


-------------------- LU SPECIFIC PUBLIC METHODS -----------------------------
UNITTEST "Pre_Sync_Action should find the correct IFS lu key when MX_UNIQUE_KEY is passed in" FOR
   PROCEDURE Pre_Sync_Action(
      attr_ IN OUT VARCHAR2);
USING
   --Insert your mock directives and mock return variables here
   @MockTable av_exe_task_step_tab
   VALUES
      | task_step_id | mx_unique_key |
      | 124          | 'STEP124'     |
      | 125          | 'STEP125'     |
   END VALUES;

   @Mock
   FUNCTION Check_Exist___ (
      step_id_       IN     NUMBER,
      competency_id_ IN     VARCHAR2 ) RETURN BOOLEAN
   IS
   BEGIN
      IF step_id_ = 124 AND competency_id_ = 'PILOT' THEN
         RETURN TRUE;
      ELSE
         RETURN FALSE;
      END IF;
   END Check_Exist___;

IS
   --Insert your test variables here
   output1_    VARCHAR2(2000);
   expected1_  VARCHAR2(2000);
   expected2_  VARCHAR2(2000);
   expected3_  VARCHAR2(2000);
BEGIN
   FOR
      | attr_ |
      | 'TASK_STEP_UNIQUE_KEY'||chr(31)||'STEP125'||chr(30)||'COMPETENCY_ID'||chr(31)||'PILOT'||chr(30)||'WITH_NOT_EXIST_KEYS'|
      | 'TASK_STEP_UNIQUE_KEY'||chr(31)||'STEP124'||chr(30)||'COMPETENCY_ID'||chr(31)||'PILOT'||chr(30)||'WITH_EXIST_KEYS'||chr(31)||'TRUE'||chr(30)|
      | 'TASK_STEP_UNIQUE_KEY'||chr(31)||'STEP125'||chr(30)||'WITH_STEP_KEY'|
   LOOP
      --Insert your test code here
      output1_ := attr_;
      Pre_Sync_Action(output1_);

      expected1_ := 'COMPETENCY_ID'||chr(31)||'PILOT'||chr(30)||'WITH_NOT_EXIST_KEYS'||'STEP_ID'||chr(31)||'125'||chr(30);
      expected2_ := 'WITH_EXIST_KEYS'||chr(31)||'TRUE'||chr(30);
      expected3_ := 'WITH_STEP_KEY'||'STEP_ID'||chr(31)||'125'||chr(30);

      --Insert your assertions here
      IF attr_ LIKE '%WITH_NOT_EXIST_KEYS%' THEN
         ASSERT output1_ = expected1_ MESSAGE 'Expected '||expected1_||' but  was '||output1_;
      ELSIF attr_ LIKE '%WITH_EXIST_KEYS%' THEN
         ASSERT output1_ = expected2_ MESSAGE 'Expected '||expected2_||' but  was '||output1_;
      ELSIF attr_ LIKE '%WITH_STEP_KEY%' THEN
         ASSERT output1_ = expected3_ MESSAGE 'Expected '||expected3_||' but  was '||output1_;
      END IF;
   END LOOP;
END UNITTEST;




