-----------------------------------------------------------------------------
--
--  Logical unit: AvExeTaskTool
--  Component:    ADCOM
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  210311  Jihalk  LMM2020R1-1580, Added unit test for Converted_Sched_Time and Converted_Acc_Time methods.
--  210111  majslk  LMM2020R1-1478, Updated check_insert__ pltst.
--  201203  majslk  LMM2020R1-1455- Added unit test for Get_Next_Seq.
--  201118  majslk  LMM2020R1-1430, Added test for check_insert__ method
--  200915  Satglk  LMM2020R1-831 - Added test for Pre_Sync_Action
--  200730  SatGlk  LMM2020R1-445 Added unit testing for Get_Task_Tools_Count().
--  200805  MADGLK  LMM2020R1-352,Added unit test for Get_Tool_Status().
-----------------------------------------------------------------------------

layer Core;


-------------------- LU SPECIFIC IMPLEMENTATION METHODS ---------------------


-------------------- LU SPECIFIC PUBLIC METHODS -----------------------------
UNITTEST "Get_Task_Tools_Count should return the no of tools for a given Task ID" FOR
   FUNCTION Get_Task_Tools_Count(
      task_id_ IN     NUMBER) RETURN NUMBER;
USING
   --Insert your mock directives and mock return variables here
   @MockTable av_exe_task_tool_tab
   VALUES
      | task_id |
      | 1       |
      | 1       |
      | 1       |
      | 2       |
      | 2       |
      | 3       |
   END VALUES;
IS
   return_   NUMBER;
   expected_ NUMBER;
BEGIN
   FOR
      | expected_ | task_id_ |
      | 3         |  1       |
      | 2         |  2       |
      | 1         |  3       |
   LOOP
      --Insert your test code here
      return_ := Get_Task_Tools_Count(task_id_);
      --Insert your assertions here
      ASSERT return_ = expected_ MESSAGE 'Expected '||expected_||' but returned '||return_;
   END LOOP;
END UNITTEST;

UNITTEST "Get_Tool_Status should return status assigned where there is a user assigned" FOR
   FUNCTION Get_Tool_Status (
      task_tool_id_ IN     NUMBER ) RETURN VARCHAR2;
USING
   --Insert your mock directives and mock return variables here
   @MockTable av_exe_task_tool_tab
   VALUES
      | assigned_user | task_tool_id |
      | 'ALAIN'       | 1            |
      | NULL          | 2            |
      | ''            | 3            |
   END VALUES;

IS
   --Insert your test variables here
   return_   VARCHAR2(2000);
   expected_ VARCHAR2(2000);
BEGIN
   FOR
      | expected_ | task_tool_id_ |
      | 'Pending' |  2            |
      | 'Signed'  |  1            |
      | 'Pending' |  3            |
   LOOP
      --Insert your test code here
      return_ := Get_Tool_Status(task_tool_id_);
      --Insert your assertions here
      ASSERT return_ = expected_ MESSAGE 'Expected '||expected_||' but returned '||return_;
   END LOOP;
END UNITTEST;

UNITTEST "Pre_Sync_Action should should find the correct IFS lu key when MX_UNIQUE_KEY is passed in" FOR
   PROCEDURE Pre_Sync_Action(
      attr_ IN OUT VARCHAR2);
USING
   --Insert your mock directives and mock return variables here
   @MockTable av_exe_task_tab
   VALUES
      | task_id | mx_unique_key |
      | 1       | 'MXKEY1'      |
   END VALUES;

   @MockTable av_part_number_tab
   VALUES
      | part_number_id | mx_unique_key     |
      | 2              | 'MXPARTNUMBERKEY2'|
   END VALUES;

   @MockTable av_exe_task_tool_tab
   VALUES
      | task_id | mx_unique_key | tool_specification_code |
      | 221     | 'MXKEY2'      | 'SPEC-1'                |
   END VALUES;

IS
   --Insert your test variables here
   output1_    VARCHAR2(2000);
   expected1_  VARCHAR2(2000);
   expected2_  VARCHAR2(2000);
BEGIN
   FOR
      | attr_ |
      | 'TASK_UNIQUE_KEY'||chr(31)||'MXKEY1'||chr(30)||'WITH_TASK_KEY'|
      | 'PART_NUMBER_UNIQUE_KEY'||chr(31)||'MXPARTNUMBERKEY2'||chr(30)||'WITH_PART_NUMBER_KEY'|
   LOOP
      --Insert your test code here
      output1_ := attr_;
      Pre_Sync_Action(output1_);
      --Insert your assertions here

      expected1_ := 'WITH_TASK_KEY'||'TASK_ID'||chr(31)||1||chr(30);
      expected2_ := 'WITH_PART_NUMBER_KEY'||'PART_NO_ID'||chr(31)||'2'||chr(30);

      --Insert your assertions here
      IF attr_ LIKE '%WITH_TASK_KEY%' THEN
         ASSERT output1_ = expected1_ MESSAGE 'Expected '||expected1_||' but  was '||output1_;
      ELSIF attr_ LIKE '%WITH_PART_NUMBER_KEY%' THEN
         ASSERT output1_ = expected2_ MESSAGE 'Expected '||expected2_||' but  was '||output1_;
      ELSE
         ASSERT output1_ = attr_ MESSAGE 'Expected '||attr_||' but  was '||output1_;
      END IF;
   END LOOP;
END UNITTEST;



UNITTEST "Check_Insert___ should assign generated sequence value for Task tool id when inserting new record" FOR
   PROCEDURE Check_Insert___ (
      newrec_ IN OUT av_exe_task_tool_tab%ROWTYPE,
      indrec_ IN OUT Indicator_Rec,
      attr_   IN OUT VARCHAR2 );
USING
   --Insert your mock directives and mock return variables here
   @MockPackage Av_Exe_Task_Tool_API
   FUNCTION Get_Next_Seq  RETURN  NUMBER
   IS
   BEGIN
      RETURN TASK_TOOL_ID_SEQ.NEXTVAL;
   END Get_Next_Seq;

   @MockPackage Av_Fault_Tool_API
   FUNCTION Get_Fault_Tool(mx_unique_key_ IN     VARCHAR2) RETURN VARCHAR2
   IS
   BEGIN
      RETURN CASE mx_unique_key_
      WHEN '1456:16203' THEN 1
      WHEN NULL         THEN NULL
      WHEN '1456:16208' THEN 2
   END;
END Get_Fault_Tool;

@MockTable av_fault_tool_tab
VALUES
   | mx_unique_key | fault_tool_id |
   | '1456:16204'  | 1             |
   | '1456:16203'  | 1             |
   | NULL          | 2             |
   | NULL          | 3             |
END VALUES;

IS
--Insert your test variables here
test_rec1_     av_exe_task_tool_tab%ROWTYPE;
test_rec2_     av_exe_task_tool_tab%ROWTYPE;
test_rec3_     av_exe_task_tool_tab%ROWTYPE;
output_        Indicator_Rec;
fault_tool_id_ NUMBER;

BEGIN
test_rec1_.Task_Tool_Id  := NULL;
test_rec1_.Mx_Unique_Key := '1456:16203';

test_rec2_.Task_Tool_Id  := 4456;
test_rec2_.Mx_Unique_Key := '1456:16209';

test_rec3_.Task_Tool_Id  := NULL;
test_rec3_.Mx_Unique_Key := NULL;

FOR
   | newrec_    | indrec_ | attr_ |
   | test_rec1_ | output_ | 'A'   |
   | test_rec2_ | output_ | 'A'   |
   | test_rec3_ | output_ | 'A'   |
LOOP
   IF newrec_.Task_Tool_Id IS NULL THEN
      fault_tool_id_:= Get_Fault_Tool(newrec_.Mx_Unique_Key);
      IF fault_tool_id_ IS NULL THEN
         newrec_.Task_Tool_Id := Get_Next_Seq();
      ELSE
         newrec_.Task_Tool_Id := fault_tool_id_;
      END IF;
      ASSERT newrec_.Task_Tool_Id IS NOT NULL MESSAGE 'Returned '||newrec_.Task_Tool_Id;
   END IF;
END LOOP;
END UNITTEST;


UNITTEST "Get_Next_Seq should return next value of the sequence" FOR
   FUNCTION Get_Next_Seq RETURN NUMBER;
USING
   --Insert your mock directives and mock return variables here
   @MockTable dual
   VALUES
      | dummy |
      | 1     |
   END VALUES;

IS
   return1_   NUMBER;
   return2_   NUMBER;
   output_    NUMBER;
   expected_  NUMBER;
BEGIN
   FOR
      | expected_ |
      | 1         |
   LOOP
      --Insert your test code here
      return1_ := Get_Next_Seq;
      return2_ := Get_Next_Seq;

      output_  := return2_ - return1_;
      --Insert your assertions here
      ASSERT output_ = expected_ MESSAGE 'Expected '||expected_||' but returned '||output_;
   END LOOP;
END UNITTEST;

UNITTEST "Converted_Sched_Time should return converted sched time" FOR
   FUNCTION Converted_Sched_Time (
      task_tool_id_ IN     NUMBER) RETURN VARCHAR2;
USING
   @MockTable av_exe_task_tool_tab
   VALUES
      | sched_duration | task_tool_id |
      | 0.50           | 1            |
      | 01.50          | 2            |
      | 155.00         | 3            |
      |  NULL          | 4            |
      | 1              | 5            |
      | 15655.50       | 6            |
   END VALUES;

IS
   return_   VARCHAR2(2000);
   expected_ VARCHAR2(2000);
BEGIN
   FOR
      | expected_ | task_tool_id_ |
      | ' 00:30'  |  1            |
      | ' 01:30'  |  2            |
      | '155:00'  |  3            |
      |  NULL     |  4            |
      | ' 01:00'  |  5            |
      | '15655:30'|  6            |
   LOOP
      return_ := Converted_Sched_Time(task_tool_id_);
      ASSERT (expected_ IS NULL AND return_ IS NULL) OR return_ = expected_ MESSAGE 'Expected '||expected_||' but returned '||return_;
   END LOOP;
END UNITTEST;

UNITTEST "Converted_Acc_Time should return converted Actual time" FOR
   FUNCTION Converted_Acc_Time (
      task_tool_id_ IN     NUMBER) RETURN VARCHAR2;
USING
   @MockTable av_exe_task_tool_tab
   VALUES
      | actual_duration | task_tool_id |
      | 0.50            | 1            |
      | 1.50            | 2            |
      | 150.00          | 3            |
      | 150.500         | 4            |
      | NULL            | 5            |
   END VALUES;

IS
   return_   VARCHAR2(2000);
   expected_ VARCHAR2(2000);
BEGIN
   FOR
      | expected_ | task_tool_id_ |
      | ' 00:30'  |  1            |
      | ' 01:30'  |  2            |
      | '150:00'  |  3            |
      | '150:30'  |  4            |
      |  NULL     |  5            |
   LOOP
      return_ := Converted_Acc_Time(task_tool_id_);
      ASSERT (expected_ IS NULL AND return_ IS NULL) OR return_ = expected_ MESSAGE 'Expected '||expected_||' but returned '||return_;
   END LOOP;
END UNITTEST;
