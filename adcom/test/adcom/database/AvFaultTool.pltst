-----------------------------------------------------------------------------
--
--  Logical unit: AvFaultTool
--  Component:    ADCOM
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  210311  Jihalk  LMM2020R1-1591, Added unit test for Converted_Sched_Time and Converted_Acc_Time methods.
--  201202  aruflk  LMM2020R1-1453, Added unit test for Check_Insert___().
--  200909  Satglk  LMM2020R1-751 - Added test for Pre_Sync_Action
--  200117  madglk  LMM2020R1-155 Added unit testing for Get_Fault_Tools_Count() and Get_Tool_Status().
-----------------------------------------------------------------------------

layer Core;


-------------------- LU SPECIFIC PUBLIC METHODS -----------------------------
UNITTEST "Get_Fault_Tools_Count should return the no of tools for each fault ID" FOR
   FUNCTION Get_Fault_Tools_Count(
      fault_id_ IN     NUMBER) RETURN NUMBER;
USING
   --Insert your mock directives and mock return variables here
   @MockTable av_fault_tool_tab
   VALUES
      | fault_id |
      | 1        |
      | 1        |
      | 2        |
   END VALUES;

IS
   --Insert your test variables here
   return_   NUMBER;
   expected_ NUMBER;
BEGIN
   FOR
      | expected_ | fault_id_ |
      | 2         |  1        |
      | 1         |  2        |
      | 0         |  3        |
   LOOP
      --Insert your test code here
      return_ := Get_Fault_Tools_Count(fault_id_);
      --Insert your assertions here
      ASSERT return_ = expected_ MESSAGE 'Expected '||expected_||' but returned '||return_;
   END LOOP;
END UNITTEST;


UNITTEST "Get_Tool_Status should return status assigned where there is a user assigned" FOR
   FUNCTION Get_Tool_Status (
      fault_tool_id_ IN     NUMBER ) RETURN VARCHAR2;
USING
   --Insert your mock directives and mock return variables here
   @MockTable av_fault_tool_tab
   VALUES
      | assigned_user | fault_tool_id |
      | 'ALAIN'       | 1             |
      | NULL          | 2             |
      | ''            | 3             |

   END VALUES;

IS
   --Insert your test variables here
   return_   VARCHAR2(2000);
   expected_ VARCHAR2(2000);
BEGIN
   FOR
      | expected_ | fault_tool_id_ |
      | 'Pending' |  2             |
      | 'Signed'  |  1             |
      | 'Pending' |  3             |

   LOOP
      --Insert your test code here
      return_ := Get_Tool_Status(fault_tool_id_);
      --Insert your assertions here
      ASSERT return_ = expected_ MESSAGE 'Expected '||expected_||' but returned '||return_;
   END LOOP;
END UNITTEST;

UNITTEST "Pre_Sync_Action should find the correct IFS lu key when MX_UNIQUE_KEY is passed in" FOR
   PROCEDURE Pre_Sync_Action(
      attr_ IN OUT VARCHAR2);
USING
   --Insert your mock directives and mock return variables here
   @MockTable av_fault_tab
   VALUES
      | fault_id | mx_unique_key |
      | 1        | 'MXKEY1'      |
   END VALUES;

   @MockTable av_part_number_tab
   VALUES
      | part_number_id | mx_unique_key      |
      | 2              | 'MXPARTNUMBERKEY2' |
   END VALUES;
IS
   --Insert your test variables here
   output1_    VARCHAR2(2000);
   expected1_  VARCHAR2(2000);
   expected2_  VARCHAR2(2000);
BEGIN
   FOR
      | attr_ |
      | 'FAULT_UNIQUE_KEY'||chr(31)||'MXKEY1'||chr(30)||'WITH_FAULT_KEY'|
      | 'PART_NUMBER_UNIQUE_KEY'||chr(31)||'MXPARTNUMBERKEY2'||chr(30)||'WITH_PART_NUMBER_KEY'|
   LOOP
      --Insert your test code here
      output1_ := attr_;
      Pre_Sync_Action(output1_);

      expected1_ := 'WITH_FAULT_KEY'||'FAULT_ID'||chr(31)||1||chr(30);
      expected2_ := 'WITH_PART_NUMBER_KEY'||'PART_NUMBER_ID'||chr(31)||'2'||chr(30);

      --Insert your assertions here
      IF attr_ LIKE '%WITH_FAULT_KEY%' THEN
         ASSERT output1_ = expected1_ MESSAGE 'Expected '||expected1_||' but  was '||output1_;
      ELSIF attr_ LIKE '%WITH_PART_NUMBER_KEY%' THEN
         ASSERT output1_ = expected2_ MESSAGE 'Expected '||expected2_||' but  was '||output1_;
      ELSE
         ASSERT output1_ = attr_ MESSAGE 'Expected '||attr_||' but  was '||output1_;
      END IF;
   END LOOP;
END UNITTEST;

UNITTEST "Check_Insert___ should should genarete next sequence value when inserting a new record." FOR
   PROCEDURE Check_Insert___ (
      newrec_ IN OUT av_fault_tool_tab%ROWTYPE,
      indrec_ IN OUT Indicator_Rec,
      attr_   IN OUT VARCHAR2 );
USING
   @MockPackage Av_Exe_Task_Tool_API
   FUNCTION Get_Next_Seq  RETURN  NUMBER
   IS
   BEGIN
      RETURN TASK_TOOL_ID_SEQ.NEXTVAL;
   END Get_Next_Seq;

IS
   test_rec1_  av_fault_tool_tab%ROWTYPE;
   test_rec2_  av_fault_tool_tab%ROWTYPE;
   output_  Indicator_Rec;
BEGIN
   FOR
      | newrec_    | indrec_ | attr_ |
      | test_rec1_ | output_ |  'A'  |
      | test_rec2_ | output_ |  'A'  |
   LOOP
      IF newrec_.fault_tool_id IS NULL THEN
         newrec_.fault_tool_id := Get_Next_Seq();
         ASSERT newrec_.fault_tool_id IS NOT NULL MESSAGE 'Returned '||newrec_.fault_tool_id;
      END IF;
   END LOOP;
END UNITTEST;

UNITTEST "Converted_Sched_Time should return convered schedule time" FOR
   FUNCTION Converted_Sched_Time (
      fault_tool_id_ IN     NUMBER) RETURN VARCHAR2;
USING
   @MockTable av_fault_tool_tab
   VALUES
      | scheduled_hours | fault_tool_id |
      | 0.50            | 1             |
      | 1.50            | 2             |
      | 150.00          | 3             |
      | NULL            | 4             |
      | 1               | 5             |
   END VALUES;

IS
   return_   VARCHAR2(2000);
   expected_ VARCHAR2(2000);
BEGIN
   FOR
      | expected_ | fault_tool_id_ |
      | ' 00:30'  |  1             |
      | ' 01:30'  |  2             |
      | '150:00'  |  3             |
      |  NULL     |  4             |
      | ' 01:00'  |  5             |
   LOOP
      return_ := Converted_Sched_Time(fault_tool_id_);
      ASSERT (expected_ IS NULL AND return_ IS NULL) OR return_ = expected_ MESSAGE 'Expected '||expected_||' but returned '||return_;
   END LOOP;
END UNITTEST;


UNITTEST "Converted_Acc_Time should should return converted Actual time" FOR
   FUNCTION Converted_Acc_Time (
      fault_tool_id_ IN     NUMBER) RETURN VARCHAR2;
USING
   @MockTable av_fault_tool_tab
   VALUES
      | Actual_Hours | fault_tool_id |
      | 0.50         | 1             |
      | 1.50         | 2             |
      | 150.50       | 3             |
      | NULL         | 4             |
      | 1            | 5             |
   END VALUES;

IS
   return_   VARCHAR2(2000);
   expected_ VARCHAR2(2000);
BEGIN
   FOR
      | expected_ | fault_tool_id_ |
      | ' 00:30'  |  1             |
      | ' 01:30'  |  2             |
      | '150:30'  |  3             |
      |  NULL     |  4             |
      | ' 01:00'  |  5             |
   LOOP
      return_ := Converted_Acc_Time(fault_tool_id_);
      ASSERT (expected_ IS NULL AND return_ IS NULL) OR return_ = expected_ MESSAGE 'Expected '||expected_||' but returned '||return_;
   END LOOP;
END UNITTEST;
